{
  "entityType" : "DASHBOARD",
  "entity" : {
    "title" : "Firmware",
    "image" : null,
    "mobileHide" : false,
    "mobileOrder" : null,
    "configuration" : {
      "description" : "",
      "widgets" : {
        "cd03188e-cd9d-9601-fd57-da4cb95fc016" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375964,
                  "endTimeMs" : 1674061775964
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Devices",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : false,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "false",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "{i18n:device.device}",
              "displayEntityLabel" : true,
              "entityLabelColumnTitle" : "{i18n:asset.label}",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "New Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "booted.tag",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.deviceTable.fwVersion}",
                "color" : "#ffeb3b",
                "settings" : { },
                "_hash" : 0.5365174899107905,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "booted.installed",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.smallWidgetTitles.installationDate}",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.8723446414034588,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_title",
                "type" : "timeseries",
                "label" : "Target FW title",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.9934225682766313,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_version",
                "type" : "timeseries",
                "label" : "Target FW version",
                "color" : "#607d8b",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.5251724416842531,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_ts",
                "type" : "timeseries",
                "label" : "Target FW set time",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : true,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "cellContentFunction" : "if (value !== '') {\n    return ctx.date.transform(value, 'yyyy-MM-dd HH:mm:ss');\n}\nreturn '';"
                },
                "_hash" : 0.31823244858578237,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "Status",
                "color" : "#f44336",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "130px",
                  "useCellStyleFunction" : true,
                  "cellStyleFunction" : "if (value == 'FAILED') {\n    return {'color' : '#D93025'};\n}\nreturn {};",
                  "useCellContentFunction" : true,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "function icon(value) {\n    if (value == 'QUEUED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">hourglass_empty</mat-icon>';\n    }\n    if (value == 'INITIATED' || value == 'DOWNLOADING' || value == 'DOWNLOADED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">downloading</mat-icon>';\n        \n    }\n    if (value == 'VERIFIED' || value == 'UPDATING' ) {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">update</mat-icon>';\n    }\n    if (value == 'UPDATED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">download_done</mat-icon>';\n    }\n    if (value == 'READY_TO_INSTALL') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">thumb_up</mat-icon>';\n    }\n    if (value == 'FAILED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #D93025\">warning</mat-icon>';\n    }\n    if (value == 'INSTALLED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">install_desktop</mat-icon>';\n    }\n    if (value == 'FLASHED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">sd_storage</mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_AUTHORIZATION') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"gesture-tap-button\" data-mat-icon-namespace=\"mdi\" style=\"color: #043d5d\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-gesture-tap-button\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M13 5C15.21 5 17 6.79 17 9C17 10.5 16.2 11.77 15 12.46V11.24C15.61 10.69 16 9.89 16 9C16 7.34 14.66 6 13 6S10 7.34 10 9C10 9.89 10.39 10.69 11 11.24V12.46C9.8 11.77 9 10.5 9 9C9 6.79 10.79 5 13 5M20 20.5C19.97 21.32 19.32 21.97 18.5 22H13C12.62 22 12.26 21.85 12 21.57L8 17.37L8.74 16.6C8.93 16.39 9.2 16.28 9.5 16.28H9.7L12 18V9C12 8.45 12.45 8 13 8S14 8.45 14 9V13.47L15.21 13.6L19.15 15.79C19.68 16.03 20 16.56 20 17.14V20.5M20 2H4C2.9 2 2 2.9 2 4V12C2 13.11 2.9 14 4 14H8V12L4 12L4 4H20L20 12H18V14H20V13.96L20.04 14C21.13 14 22 13.09 22 12V4C22 2.9 21.11 2 20 2Z\"></path></svg></mat-icon>';\n    }\n    if (value == 'WAITING_DOWNLOAD_CONDITIONS') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"gesture-swipe-down\" data-mat-icon-namespace=\"mdi\" style=\"color: #043d5d\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-gesture-swipe-down\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M10,9A1,1 0 0,1 11,8A1,1 0 0,1 12,9V13.47L13.21,13.6L18.15,15.79C18.68,16.03 19,16.56 19,17.14V21.5C18.97,22.32 18.32,22.97 17.5,23H11C10.62,23 10.26,22.85 10,22.57L5.1,18.37L5.84,17.6C6.03,17.39 6.3,17.28 6.58,17.28H6.8L10,19V9M1,9L4,12L7,9H5V3H3V9H1Z\"></path></svg></mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_CONDITIONS') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"cellphone-cog\" data-mat-icon-namespace=\"mdi\" style=\"color: #043d5d\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-cellphone-cog\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M9.82,12.5C9.84,12.33 9.86,12.17 9.86,12C9.86,11.83 9.84,11.67 9.82,11.5L10.9,10.69C11,10.62 11,10.5 10.96,10.37L9.93,8.64C9.87,8.53 9.73,8.5 9.62,8.53L8.34,9.03C8.07,8.83 7.78,8.67 7.47,8.54L7.27,7.21C7.27,7.09 7.16,7 7.03,7H5C4.85,7 4.74,7.09 4.72,7.21L4.5,8.53C4.21,8.65 3.92,8.83 3.65,9L2.37,8.5C2.25,8.47 2.12,8.5 2.06,8.63L1.03,10.36C0.97,10.5 1,10.61 1.1,10.69L2.18,11.5C2.16,11.67 2.15,11.84 2.15,12C2.15,12.17 2.17,12.33 2.19,12.5L1.1,13.32C1,13.39 1,13.53 1.04,13.64L2.07,15.37C2.13,15.5 2.27,15.5 2.38,15.5L3.66,15C3.93,15.18 4.22,15.34 4.53,15.47L4.73,16.79C4.74,16.91 4.85,17 5,17H7.04C7.17,17 7.28,16.91 7.29,16.79L7.5,15.47C7.8,15.35 8.09,15.17 8.36,15L9.64,15.5C9.76,15.53 9.89,15.5 9.95,15.37L11,13.64C11.04,13.53 11,13.4 10.92,13.32L9.82,12.5M6,13.75C5,13.75 4.2,12.97 4.2,12C4.2,11.03 5,10.25 6,10.25C7,10.25 7.8,11.03 7.8,12C7.8,12.97 7,13.75 6,13.75M17,1H7A2,2 0 0,0 5,3V6H7V4H17V20H7V18H5V21A2,2 0 0,0 7,23H17A2,2 0 0,0 19,21V3A2,2 0 0,0 17,1Z\"></path></svg></mat-icon>';\n    }\n    if (value == 'UNASSIGNED') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"monitor-shimmer\" data-mat-icon-namespace=\"mdi\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-monitor-shimmer\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M21 16H3V4H21M21 2H3C1.89 2 1 2.89 1 4V16C1 17.11 1.9 18 3 18H10V20H8V22H16V20H14V18H21C22.11 18 23 17.11 23 16V4C23 2.89 22.1 2 21 2M15 5.5L14.38 6.87L13 7.5L14.38 8.13L15 9.5L15.63 8.13L17 7.5L15.63 6.87L15 5.5M10.5 7.5L9.41 9.91L7 11L9.41 12.09L10.5 14.5L11.6 12.09L14 11L11.6 9.91L10.5 7.5\"></path></svg></mat-icon>';\n    }\n    return '';\n}\nfunction capitalize (s) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase().replace(/_/g, \" \");\n}\n\nreturn icon(value) + '<span style=\"vertical-align: super;padding-left: 8px;\">' + capitalize(value) + '</span>';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7764426948615217,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null,
                "aggregationType" : "NONE"
              }, {
                "name" : "fw_checksum",
                "type" : "attribute",
                "label" : "fw_checksum",
                "color" : "#3f51b5",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.5594087842471693,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_url",
                "type" : "attribute",
                "label" : "fw_url",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.4204673738685043,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "ota_auth_by_default",
                "type" : "attribute",
                "label" : "Auth",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.029349555334992727,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "if (!value || value === 'true') {\n    return 'Auto';\n}\nreturn 'Manual';"
              }, {
                "name" : "ota_auth",
                "type" : "attribute",
                "label" : "ota_auth",
                "color" : "#ffeb3b",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "never"
                },
                "_hash" : 0.6944307776462175,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "fw_state",
                "color" : "#03a9f4",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "never"
                },
                "_hash" : 0.680503981101044,
                "aggregationType" : "NONE",
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "actions" : {
              "actionCellButton" : [ {
                "name" : "{i18n:firmware-dashboard.firmwareStatusHistory}",
                "icon" : "history",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_firmware_history",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "98a1406c-3301-bc2f-2c5d-d637ce3b663b"
              }, {
                "name" : "{i18n:ota-update.assign-firmware}",
                "icon" : "memory",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('DEVICE', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit firmware {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div *ngIf=\"entity.deviceProfileId\" mat-dialog-content fxLayout=\"column\">\n        <tb-ota-package-autocomplete\n            [useFullEntityId]=\"true\"\n            [deviceProfileId]=\"entity.deviceProfileId.id\"\n            formControlName=\"firmwareId\">\n        </tb-ota-package-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : "form {\n    min-width: 300px !important;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        firmwareId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        saveEntity().subscribe(\n            function () {\n                // widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n\n    function getEntityInfo() {\n        entityService.getEntity(entityId.entityType, entityId.id).subscribe(\n            function (data) {\n                vm.entity = data;\n                vm.editEntityFormGroup.patchValue({\n                    firmwareId: vm.entity.firmwareId\n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        vm.entity.firmwareId = formValues.firmwareId;\n        return deviceService.saveDevice(vm.entity);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "23099c1d-454b-25dc-8bc0-7cf33c21c5d5"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.autoAuth}",
                "icon" : "mdi:refresh-auto",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Manual') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Manual') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "994bad3a-ddf3-0e90-01d8-04150f0ba498"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.manualAuth}",
                "icon" : "mdi:gesture-tap",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Auto') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Auto') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: false}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a2594ee5-e1aa-fd7c-2256-cefa6f5432a0"
              }, {
                "name" : "{i18n:firmware-dashboard.allowInstallation}",
                "icon" : "mdi:wrench-cog",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "let ota_auth = data.ota_auth ? data.ota_auth : 'false';\n//if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\nif (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\n//if (check_perms('DEVICE', 'RPC_CALL') && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\nif (check_perms('DEVICE', 'RPC_CALL') && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9ae4c19e-73ce-f2dd-26f2-bcb984cd99e9"
              } ],
              "rowClick" : [ {
                "name" : "Highlight folder",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "let $scope = widgetContext.$scope;\nlet $injector = $scope.$injector;\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nreturn goToMoveOrganigramState();\n\nasync function goToMoveOrganigramState() {\n    var query = {\n        parameters: {\n            rootId: entityId.id,\n            rootType: entityId.entityType,\n            direction: \"TO\",\n            maxLevel: 1\n        },\n        filters: [{\n            relationType: 'Organigram',\n            entityTypes: [\"ASSET\"]\n        }]\n    };\n    let resp = await entityRelationService.findInfoByQuery(query).toPromise();\n    let assetId = resp[0].from.id;\n    $('.jstree-search').removeClass('jstree-search');\n    $('#'+assetId).parent().parent().addClass('jstree-search');\n}\n\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "ab1124c2-9562-ed25-9a8f-6a68887a2ac2"
              } ],
              "headerButton" : [ {
                "name" : "{i18n:firmware-dashboard.iconHelp.title}",
                "icon" : "help",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<!--<form style=\"width: 480px\">-->\r\n<form>\r\n\t<mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n\t\t<h2>{{\"firmware-dashboard.iconHelp.title\" | translate}}</h2>\r\n\t\t<span fxFlex></span>\r\n\t\t<button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n\t\t\t<mat-icon class=\"material-icons\">close</mat-icon>\r\n\t\t</button>\r\n\t</mat-toolbar>\r\n\t<mat-progress-bar\r\n\t\tcolor=\"warn\"\r\n\t\tmode=\"indeterminate\"\r\n\t\t*ngIf=\"isLoading$ | async\"\r\n\t>\r\n\t</mat-progress-bar>\r\n\t<div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n\t<div mat-dialog-content>\r\n\t\t<div class=\"mat-padding\" fxLayout=\"column\">\r\n\t\t\t<section>\r\n\t\t\t\t<!--<h4>{{\"firmware-dashboard.iconHelp.title\" | translate}}</h4>-->\r\n\t\t\t\t<table class=\"icon-table\">\r\n\t\t\t\t\t<tr *ngFor=\"let item of iconStates\">\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"item.icon\" [class]=\"item.class\" [fontIcon]=\"item.icon\"></mat-icon>\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"item.svgIcon\" [class]=\"item.class\" [svgIcon]=\"item.svgIcon\"></mat-icon>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td><b>{{ item.title }}:</b> {{ item.info }}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</section>\r\n\t\t\t<section *ngIf=\"helpInfo.length > 0\">\r\n\t\t\t\t<h4>Extra information</h4>\r\n\t\t\t\t<table class=\"icon-table\">\r\n\t\t\t\t\t<tr *ngFor=\"let item of helpInfo\">\r\n\t\t\t\t\t\t<td>{{ item.title }}</td>\r\n\t\t\t\t\t\t<td>{{ item.description }}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t</div>\r\n\t<div mat-dialog-actions fxLayout=\"row\">\r\n\t\t<span fxFlex></span>\r\n\t\t<button\r\n\t\t\tmat-button\r\n\t\t\tcolor=\"primary\"\r\n\t\t\tstyle=\"margin-right: 20px\"\r\n\t\t\ttype=\"button\"\r\n\t\t\t[disabled]=\"(isLoading$ | async)\"\r\n\t\t\t(click)=\"cancel()\"\r\n\t\t\tcdkFocusInitial\r\n\t\t>\r\n\t\t\tClose\r\n\t\t</button>\r\n\t</div>\r\n</form>\r\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get(\"customDialog\"));\r\n\r\nopenAddAssetDialog();\r\n\r\nfunction openAddAssetDialog() {\r\n\tcustomDialog.customDialog(htmlTemplate, AddAssetDialogController).subscribe();\r\n}\r\n\r\nasync function AddAssetDialogController(instance) {\r\n\tlet vm = instance;\r\n\tvm.iconStates = getIconStates();\r\n\tvm.helpInfo = getHelpInfo();\r\n\r\n\tvm.cancel = function () {\r\n\t\tvm.dialogRef.close(null);\r\n\t};\r\n}\r\n\r\n//Get information of the confirmation states\r\nfunction getIconStates() {\r\n    let translate = widgetContext.translate;\r\n\treturn [\r\n\t    {icon: 'sd_storage', title:\"Flashed\", info: translate.instant('firmware-dashboard.iconHelp.flashed')},\r\n\t    {icon: 'hourglass_empty', title:\"Queued\", info: translate.instant('firmware-dashboard.iconHelp.queued')},\r\n\t    {icon: 'downloading', title:\"Initiated\", info: translate.instant('firmware-dashboard.iconHelp.initiated')},\r\n\t    //{svgIcon: 'mdi:gesture-swipe-down', title:\"Waiting download conditions\", info: translate.instant('firmware-dashboard.iconHelp.waiting_download_conditions')},\r\n\t    {icon: 'downloading', title:\"Downloading\", info: translate.instant('firmware-dashboard.iconHelp.downloading')},\r\n\t    {icon: 'downloading', title:\"Downloaded\", info: translate.instant('firmware-dashboard.iconHelp.downloaded')},\r\n\t    {icon: 'update', title:\"Verified\", info: translate.instant('firmware-dashboard.iconHelp.verified')},\r\n\t    {svgIcon: 'mdi:gesture-tap-button', title:\"Waiting installation authorization\", info: translate.instant('firmware-dashboard.iconHelp.waiting_installation_authorization')},\r\n\t    {svgIcon: 'mdi:cellphone-cog', title:\"Waiting installation conditions\", info: translate.instant('firmware-dashboard.iconHelp.waiting_installation_conditions')},\r\n\t    {icon: 'update', title:\"Updating\", info: translate.instant('firmware-dashboard.iconHelp.updating')},\r\n\t    {icon: 'install_desktop', title:\"Installed\", info: translate.instant('firmware-dashboard.iconHelp.installed')},\r\n\t    {icon: 'download_done', title:\"Updated\", info: translate.instant('firmware-dashboard.iconHelp.updated')},\r\n\t    {icon: 'warning', title:\"Failed\", info: translate.instant('firmware-dashboard.iconHelp.failed')},\r\n\t    {svgIcon: 'mdi:monitor-shimmer', title:\"Unassigned\", info: translate.instant('firmware-dashboard.iconHelp.clean')},\r\n    ];\r\n}\r\n\r\n//Get extra help information\r\nfunction getHelpInfo() {\r\n    return [];\r\n}\r\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b8eb45d5-aa36-580d-7da3-b4893361990a"
              } ],
              "cellClick" : [ ]
            },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "cd03188e-cd9d-9601-fd57-da4cb95fc016",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "100b756c-0082-6505-3ae1-3603e6deea48" : {
          "type" : "timeseries",
          "sizeX" : 8,
          "sizeY" : 6.5,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "19f41c21-d9af-e666-8f50-e1748778f955",
              "filterId" : null,
              "dataKeys" : [ {
                "name" : "current_fw_title",
                "type" : "timeseries",
                "label" : "Current firmware title",
                "color" : "#2196f3",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.5978079905579401,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "current_fw_version",
                "type" : "timeseries",
                "label" : "Current firmware version",
                "color" : "#4caf50",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.027392025058568192,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_title",
                "type" : "timeseries",
                "label" : "Target firmware title",
                "color" : "#f44336",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.9496350796287059,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_version",
                "type" : "timeseries",
                "label" : "Target firmware version",
                "color" : "#ffc107",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.6734152252264187,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "Status",
                "color" : "#607d8b",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : ""
                },
                "_hash" : 0.2983399718643074,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "function capitalize (s) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase().replace(/_/g, \" \");\n}\nif (value !== '') {\n    return capitalize(value);\n}\nreturn value;",
                "aggregationType" : null
              }, {
                "name" : "fw_error",
                "type" : "timeseries",
                "label" : "Info",
                "color" : "#9c27b0",
                "settings" : {
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false
                },
                "_hash" : 0.6021711206447022,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null,
                "aggregationType" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "hideAggregation" : false,
              "hideAggInterval" : false,
              "hideTimezone" : false,
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 0,
                "timewindowMs" : 2592000000,
                "quickInterval" : "CURRENT_DAY",
                "interval" : 1000
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : false,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "8px",
            "settings" : {
              "showTimestamp" : true,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "enableSearch" : true,
              "enableStickyHeader" : true,
              "enableStickyAction" : true
            },
            "title" : "Firmware history",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "widgetStyle" : { },
            "actions" : { },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "displayTimewindow" : true,
            "titleTooltip" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "100b756c-0082-6505-3ae1-3603e6deea48",
          "typeFullFqn" : "system.cards.timeseries_table"
        },
        "17543c57-af4a-2c1e-bf12-53a7b46791e6" : {
          "type" : "latest",
          "sizeX" : 8,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entityCount",
              "name" : "",
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "19a0ad1c-b31d-4a29-9d7b-5d87e2a8ea6e",
              "dataKeys" : [ {
                "name" : "count",
                "type" : "count",
                "label" : "waitingDevicesNumber",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.7404827038869322,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375965,
                  "endTimeMs" : 1674061775965
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card' id=\"activeDevices\">\n    <div class='content' id=\"activeDevices\">\n        <img id=\"activeDevices\" src='data:image/svg+xml;utf8,<svg width=\"24\" height=\"40\" viewBox=\"0 0 24 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M0 0V12H0.0200005L0 12.02L8 20L0 28L0.0200005 28.02H0V40H24V28.02H23.98L24 28L16 20L24 12.02L23.98 12H24V0H0ZM20 29V36H4V29L12 21L20 29ZM12 19L4 11V4H20V11L12 19Z\" fill=\"black\"/>\n</svg>\n'>\n        <div class='value' id=\"activeDevices\">\n            ${waitingDevicesNumber:0}\n        </div> \n        <div class='description' id=\"activeDevices\">\n            {i18n:firmware-dashboard.deviceWaiting}\n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 1px solid #E0E0E0;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px 10px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .value {\n    margin: 12px 0 5px;\n    font-weight: 500;\n    font-size: 2em;\n    line-height: 1;\n    text-align: center;\n    letter-spacing: -0.02em;\n    color: #333333;\n}\n\n.card .description {\n    font-size: 0.8em;\n    line-height: 1;\n    color: #000000;\n    opacity: 0.6;\n    text-align: center;\n    letter-spacing: -0.02em;\n}\n\n.card .content img {\n    height: 26px;    \n}\n\n.card .content:hover {\n    background-color: #ddd;\n}\n\n/*@media (min-width: 960px) and (max-width: 1200px) {\n    .card .content img {\n        height: 28px;    \n    }\n    \n    .card .value {\n        margin: 12px 0 5px;\n        font-size: 2em;\n        line-height: 1;\n    }\n    \n    .card .description {\n        font-size: 0.8em;\n        line-height: 1;\n    }\n}*/"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "activeDevices",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_waiting",
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "4d9a77a2-f0a5-690c-a83b-b0e940be788c"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableDataExport" : false,
            "displayTimewindow" : true
          },
          "id" : "17543c57-af4a-2c1e-bf12-53a7b46791e6",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "6c1c4e1a-bce0-f5ad-ff8b-ba1dfc5a4ec6" : {
          "type" : "latest",
          "sizeX" : 8,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entityCount",
              "name" : "",
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "579f0468-9ce9-7e3e-b34c-88dd3de59897",
              "dataKeys" : [ {
                "name" : "count",
                "type" : "count",
                "label" : "updatingDevicesNumber",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.7404827038869322,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375965,
                  "endTimeMs" : 1674061775965
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card' id=\"activeDevices\">\n    <div class='content' id=\"activeDevices\">\n        <img id=\"activeDevices\" src='data:image/svg+xml;utf8,<svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M36 14.24H22.44L27.92 8.6C22.46 3.2 13.62 3 8.16001 8.4C2.70001 13.82 2.70001 22.56 8.16001 27.98C13.62 33.4 22.46 33.4 27.92 27.98C30.64 25.3 32 22.16 32 18.2H36C36 22.16 34.24 27.3 30.72 30.78C23.7 37.74 12.3 37.74 5.28001 30.78C-1.71999 23.84 -1.77999 12.56 5.24001 5.62C12.26 -1.32 23.52 -1.32 30.54 5.62L36 0V14.24ZM19 10V18.5L26 22.66L24.56 25.08L16 20V10H19Z\" fill=\"black\"/>\n</svg>'>\n        <div class='value' id=\"activeDevices\">\n            ${updatingDevicesNumber:0}\n        </div> \n        <div class='description' id=\"activeDevices\">\n            {i18n:firmware-dashboard.deviceUpdating}\n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 1px solid #E0E0E0;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px 10px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .value {\n    margin: 12px 0 5px;\n    font-weight: 500;\n    font-size: 2em;\n    line-height: 1;\n    text-align: center;\n    letter-spacing: -0.02em;\n    color: #333333;\n}\n\n.card .description {\n    font-size: 0.8em;\n    line-height: 1;\n    color: #000000;\n    opacity: 0.6;\n    text-align: center;\n    letter-spacing: -0.02em;\n}\n\n.card .content img {\n    height: 26px;    \n}\n\n.card .content:hover {\n    background-color: #ddd;\n}\n\n/*@media (min-width: 960px) and (max-width: 1200px) {\n    .card .content img {\n        height: 28px;    \n    }\n    \n    .card .value {\n        margin: 12px 0 5px;\n        font-size: 2em;\n        line-height: 1;\n    }\n    \n    .card .description {\n        font-size: 0.8em;\n        line-height: 1;\n    }\n}*/"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "activeDevices",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_updating",
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "57d39904-2350-b29b-78ed-56b8268814cb"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableDataExport" : false,
            "displayTimewindow" : true
          },
          "id" : "6c1c4e1a-bce0-f5ad-ff8b-ba1dfc5a4ec6",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "e6674227-9cf3-a2f6-ecac-5ccfc38a3c81" : {
          "type" : "latest",
          "sizeX" : 8,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entityCount",
              "name" : "",
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "6044e198-df64-cd76-f339-696f220c4943",
              "dataKeys" : [ {
                "name" : "count",
                "type" : "count",
                "label" : "updatedDevicesNumber",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.7404827038869322,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375965,
                  "endTimeMs" : 1674061775965
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card' id=\"activeDevices\">\n    <div class='content' id=\"activeDevices\">\n        <img id=\"activeDevices\" src='data:image/svg+xml;utf8,<svg width=\"34\" height=\"32\" viewBox=\"0 0 34 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M33.26 2.82L30.44 0L12.06 18.38L3.55999 9.9L0.73999 12.72L12.06 24.04L33.26 2.82Z\" fill=\"black\"/>\n<path d=\"M31 28H3V32H31V28Z\" fill=\"black\"/>\n</svg>'>\n        <div class='value' id=\"activeDevices\">\n            ${updatedDevicesNumber:0}\n        </div> \n        <div class='description' id=\"activeDevices\">\n            {i18n:firmware-dashboard.deviceUpdated}\n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 1px solid #E0E0E0;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px 10px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .value {\n    margin: 12px 0 5px;\n    font-weight: 500;\n    font-size: 2em;\n    line-height: 1;\n    text-align: center;\n    letter-spacing: -0.02em;\n    color: #333333;\n}\n\n.card .description {\n    font-size: 0.8em;\n    line-height: 1;\n    color: #000000;\n    opacity: 0.6;\n    text-align: center;\n    letter-spacing: -0.02em;\n}\n\n.card .content img {\n    height: 26px;    \n}\n\n.card .content:hover {\n    background-color: #ddd;\n}\n\n/*@media (min-width: 960px) and (max-width: 1200px) {\n    .card .content img {\n        height: 28px;    \n    }\n    \n    .card .value {\n        margin: 12px 0 5px;\n        font-size: 2em;\n        line-height: 1;\n    }\n    \n    .card .description {\n        font-size: 0.8em;\n        line-height: 1;\n    }\n}*/"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "activeDevices",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_updated",
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "d787c212-8c56-34f0-349a-5aae2ffd1eae"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableDataExport" : false,
            "displayTimewindow" : true
          },
          "id" : "e6674227-9cf3-a2f6-ecac-5ccfc38a3c81",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "77b10144-b904-edd5-8c7c-8fb75616c6d8" : {
          "type" : "latest",
          "sizeX" : 8,
          "sizeY" : 3,
          "config" : {
            "datasources" : [ {
              "type" : "entityCount",
              "name" : "",
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "bdbc6ea1-95a7-3912-341a-58dc7704a00f",
              "dataKeys" : [ {
                "name" : "count",
                "type" : "count",
                "label" : "updatingDevicesNumber",
                "color" : "#4caf50",
                "settings" : { },
                "_hash" : 0.7404827038869322,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ]
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375965,
                  "endTimeMs" : 1674061775965
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#fff",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "cardHtml" : "<div class='card' id=\"activeDevices\">\n    <div class='content' id=\"activeDevices\">\n        <div class=\"container-svg\" id=\"activeDevices\">\n            <svg viewBox=\"0 0 24 24\" id=\"activeDevices\">\n                <path id=\"activeDevices\" fill=\"currentColor\" d=\"M13 14H11V9H13M13 18H11V16H13M1 21H23L12 2L1 21Z\" />\n            </svg>\n        </div>\n        <div class='value error_firmware_failed_count' id=\"activeDevices\">\n            ${updatingDevicesNumber:0}\n        </div> \n        <script type=\"text/javascript\">\n            function init() {\n                var counter = $('.error_firmware_failed_count');\n                var value = +counter.text();\n                if(value) {\n                    counter.css('color', '#D93025');\n                }\n            };\n            init();\n        </script>\n        <div class='description' id=\"activeDevices\">\n            {i18n:firmware-dashboard.deviceFailed}\n        </div>\n    </div>\n</div>",
              "cardCss" : ".card {\n   width: 100%;\n   height: 100%;\n   border: 1px solid #E0E0E0;\n   box-sizing: border-box;\n}\n\n.card .content {\n   padding: 20px 10px;\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   justify-content: center;\n   height: 100%;\n   box-sizing: border-box;\n}\n\n.card .value {\n    margin: 12px 0 5px;\n    font-weight: 500;\n    font-size: 2em;\n    line-height: 1;\n    text-align: center;\n    letter-spacing: -0.02em;\n    color: #333333;\n}\n\n.card .description {\n    font-size: 0.8em;\n    line-height: 1;\n    color: #000000;\n    opacity: 0.6;\n    text-align: center;\n    letter-spacing: -0.02em;\n}\n\n.card .container-svg {\n    height: 26px;\n    width: 26px;\n}\n\n.card .content:hover {\n    background-color: #ddd;\n}\n\n/*@media (min-width: 960px) and (max-width: 1200px) {\n    .card .content img {\n        height: 28px;    \n    }\n    \n    .card .value {\n        margin: 12px 0 5px;\n        font-size: 2em;\n        line-height: 1;\n    }\n    \n    .card .description {\n        font-size: 0.8em;\n        line-height: 1;\n    }\n}*/"
            },
            "title" : "New HTML Value Card",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "useDashboardTimewindow" : true,
            "showLegend" : false,
            "actions" : {
              "elementClick" : [ {
                "name" : "activeDevices",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_error",
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "0b3d2887-9929-84d5-3795-0763dca15cba"
              } ]
            },
            "showTitleIcon" : false,
            "titleIcon" : null,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "enableDataExport" : false,
            "displayTimewindow" : true
          },
          "id" : "77b10144-b904-edd5-8c7c-8fb75616c6d8",
          "typeFullFqn" : "system.cards.html_value_card"
        },
        "a3ffc20b-fe2d-1a93-c1f3-75a859ebffea" : {
          "typeFullFqn" : "system.cards.entities_hierarchy",
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 3.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 86400000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1729435410561,
                  "endTimeMs" : 1729521810561
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "nodeRelationQueryFunction" : "\n\n// Function should return relations query object for current node used to fetch entity children.\n// Function can return 'default' string value. In this case default relations query will be used.\n\n// The following example code will construct simple relations query that will fetch relations of type 'Contains'\n// from the current entity.\n\nvar entity = nodeCtx.entity;\nvar query = {\n    parameters: {\n        rootId: entity.id.id,\n        rootType: entity.id.entityType,\n        direction: \"FROM\",\n        maxLevel: 1\n    },\n    filters: [{\n        relationType: \"Organigram\",\n        entityTypes: [\"ASSET\"]\n        //entityTypes: [\"ASSET\", \"DEVICE\"]\n    }]\n};\nreturn query;\n\n",
              "nodeHasChildrenFunction" : "/**\n\n// Function should return boolean value indicating whether current node has children (whether it can be expanded).\n\n// The following example code will restrict entities hierarchy expansion up to third level.\n\nreturn nodeCtx.level <= 2;\n\n// The next example code will restrict entities expansion according to the value of example 'nodeHasChildren' attribute.\n\nvar data = nodeCtx.data;\nif (data.hasOwnProperty('nodeHasChildren') && data['nodeHasChildren'] !== null) {\n    return data['nodeHasChildren'] === 'true';\n} else {\n    return true;\n}\n  \n**/\n\nvar entity = nodeCtx.entity;\nif (entity.id.entityType == \"ASSET\") {\n    return true;\n} else {\n    return false;\n}",
              "nodeOpenedFunction" : "\n\n// Function should return boolean value indicating whether current node should be opened (expanded) when it first loaded.\n\n// The following example code will open by default nodes up to third level.\n\nsetTimeout(function() {\n    if (typeof widgetCtx.$container !== undefined) {\n        if ($(widgetCtx.$container[0]).find('.jstree-clicked').length == 0 ) {\n            let selectedFolder = widgetCtx.stateController.getStateParams().OnOrganigramSelected;\n            let assetId = selectedFolder ? selectedFolder.entityId.id : widgetCtx.datasources[0].entityId;\n            $(widgetCtx.$container[0]).find('#'+assetId).click();\n            //$(widgetCtx.$container[0]).find('#'+assetId).parent().addClass('jstree-clicked');\n        }\n    }\n}, 500);\nreturn nodeCtx.level <= 100;\n ",
              "nodeDisabledFunction" : "// Function should return boolean value indicating whether current node should be disabled (not selectable).\n\nvar entity = nodeCtx.entity;\nlet $injector = widgetCtx.$scope.$injector; \nlet userPermissionsService = $injector.get(widgetCtx.servicesMap.get('userPermissionsService'));\nlet perms = userPermissionsService.userPermissions;\nif (check_perms('DEVICE', 'READ') || entity.name.includes('--Root')) {\n    return false;\n}\n\nif (!widgetCtx.$scope.deviceGroups) {\n    get_device_groups();\n}\nreturn entity_disabled_function();\n\nfunction entity_disabled_function() {\n    return !check_device_groups();\n}\n\nfunction check_perms(entityType, operation) {\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nfunction check_device_groups() {\n    if (perms.readGroupPermissions.DEVICE.entityGroupIds.length > 0 && widgetCtx.$scope.deviceGroups) {\n        return widgetCtx.$scope.deviceGroups.some(g => g.name === entity.name);\n    }\n    return false;\n}\n\nasync function get_device_groups() {\n    let entityGroupService = $injector.get(widgetCtx.servicesMap.get('entityGroupService'));\n    let groupIds = perms.readGroupPermissions.DEVICE.entityGroupIds.map(g => g.id);\n    let groups = await entityGroupService.getEntityGroupEntityInfosByIds(groupIds).toPromise();\n    widgetCtx.$scope.deviceGroups = groups;\n    return entity_disabled_function();\n}",
              "nodeIconFunction" : "// Function should return node icon info object.\n// Resulting object should contain either 'materialIcon' or 'iconUrl' property. \n// Where:\n//    - 'materialIcon' - name of the material icon to be used from the Material Icons Library (https://material.io/tools/icons);\n//    - 'iconUrl' - url of the external image to be used as node icon.\n// Function can return 'default' string value. In this case default icons according to entity type will be used.\n\n// The following example code shows how to use external image for devices which name starts with 'Test' and use \n// default icons for the rest of entities.\n\nfunction getRootNamespace(nodeCtx) {\n    if (nodeCtx.level == 1) {\n        let name = nodeCtx.entity.name;\n        return splitEntityName(name)[0];\n    }\n    return getRootNamespace(nodeCtx.parentNodeCtx);\n}\n\nfunction splitEntityName(name) {\n    return name.split(\"--\");\n}\n\nvar entity = nodeCtx.entity;\nlet icon = 'default';\nif (entity.id.entityType == \"ASSET\") {\nvar rootNamespace = getRootNamespace(nodeCtx);\nvar nameSplit = splitEntityName(entity.name);\n    if (nameSplit[0] === rootNamespace) {\n        icon = nameSplit[1] === 'Root' ? 'radio_button_checked' : (nameSplit[1] === 'Pending' ? 'folder_special' : 'folder');\n        \n    } else {\n        icon = nameSplit[1] === 'Root' ? 'radio_button_unchecked' : (nameSplit[1] === 'Pending' ? 'crop_din' : 'folder_open');\n    }\n    return {materialIcon: icon};\n}else if(entity.id.entityType == \"CUSTOMER\" || entity.id.entityType == \"TENANT\") {\n    return null;\n} else {\n    return 'default';\n}\n",
              "nodeTextFunction" : "// Function should return text (can be HTML code) for the current node.\n\nvar entity = nodeCtx.entity;\nlet $injector = widgetCtx.$scope.$injector; \nlet userPermissionsService = $injector.get(widgetCtx.servicesMap.get('userPermissionsService'));\nlet perms = userPermissionsService.userPermissions;\nvar entity = nodeCtx.entity;\nif (entity.id.entityType != \"ASSET\") {\n    return '';\n}\nif (check_perms('DEVICE', 'READ') || entity.name.includes('--Root')) {\n    return entity_text();\n}\nif (!widgetCtx.$scope.deviceGroups) {\n    return get_device_groups();\n}\nreturn entity_text_function();\n\nfunction entity_text() {\n    var text = entity.label ? entity.label : entity.name;\n    return \"<span id='\"+ entity.id.id + \"'>\" + text + \"</span>\";\n}\n\nfunction entity_text_function() {\n    if (check_device_groups()) {\n        return entity_text();\n    }\n    return '';\n}\n\nfunction check_perms(entityType, operation) {\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nfunction check_device_groups() {\n    if (perms.readGroupPermissions.DEVICE.entityGroupIds.length > 0 && widgetCtx.$scope.deviceGroups) {\n        return widgetCtx.$scope.deviceGroups.some(g => g.name === entity.name);\n    }\n    return false;\n}\n\nasync function get_device_groups() {\n    let entityGroupService = $injector.get(widgetCtx.servicesMap.get('entityGroupService'));\n    let groupIds = perms.readGroupPermissions.DEVICE.entityGroupIds.map(g => g.id);\n    let groups = await entityGroupService.getEntityGroupEntityInfosByIds(groupIds).toPromise();\n    widgetCtx.$scope.deviceGroups = groups;\n    return entity_text_function();\n}",
              "nodesSortFunction" : "/**\n\n// This function is used to sort nodes of the same level. Function should compare two nodes and return \n// integer value: \n//     - less than 0 - sort nodeCtx1 to an index lower than nodeCtx2\n//     - 0 - leave nodeCtx1 and nodeCtx2 unchanged with respect to each other\n//     - greater than 0 - sort nodeCtx2 to an index lower than nodeCtx1\n\n// The following example code will sort entities first by entity type in alphabetical order then\n// by entity name in alphabetical order.\n\nvar result = nodeCtx1.entity.id.entityType.localeCompare(nodeCtx2.entity.id.entityType);\nif (result === 0) {\n    result = nodeCtx1.entity.name.localeCompare(nodeCtx2.entity.name);\n}\nreturn result;\n  \n**/"
            },
            "title" : "",
            "dropShadow" : true,
            "enableFullscreen" : false,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : "",
              "entityAliasId" : "ccae8410-5bc3-1657-a383-e06136042fff",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            }, {
              "type" : "entity",
              "entityAliasId" : "fed02cfa-eb79-50e1-884b-530e7507e243",
              "dataKeys" : [ {
                "name" : "billPlan",
                "type" : "attribute",
                "label" : "billPlan",
                "color" : "#2196f3",
                "settings" : { },
                "_hash" : 0.8516467852182839,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "widgetStyle" : { },
            "actions" : {
              "nodeSelected" : [ {
                "name" : "OnOrganigramSelected",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "custom",
                "customFunction" : "var stateId = widgetContext.stateController.getStateId();\nvar params = widgetContext.stateController.getStateParams();\nvar selectedEntity = {\n    entityId: entityId,\n    entityName: entityName,\n    entityLabel: entityLabel,\n    relationType: 'Organigram'\n};\n    \n\n//$(widgetContext.$container[0]).find('.mat-row.tb-current-entity').removeClass('tb-current-entity');\nparams.OnOrganigramSelected = selectedEntity;\nwidgetContext.stateController.updateState(stateId, params, false);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "e6f88001-4c13-d01e-c72b-9fde435b8a17"
              } ],
              "headerButton" : [ {
                "name" : "{i18n:basic-dashboard.hierarchy-widget.editFolderName}",
                "icon" : "create",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('ASSET', 'WRITE') && check_perms('GROUP', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n \n<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>{{\"action.edit\" | translate }} {{entityLabel}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>{{\"converter.name\" | translate }}</mat-label>\n                <input matInput formControlName=\"entityLabel\" >\n            </mat-form-field>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            {{\"action.cancel\" | translate }}\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            {{\"action.save\" | translate }}\n        </button>\n    </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\nlet $scope = widgetContext.$scope;\nlet $injector = $scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet selectedEntity = widgetContext.stateController.getStateParams().OnOrganigramSelected;\nlet translate = widgetContext.translate;\nif (!selectedEntity) {\n    let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n    dialogs.alert(translate.instant('event.error'), translate.instant(\"basic-dashboard.hierarchy-widget.noFolder\"), translate.instant('action.close'));\n    return false;\n}\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n    \n    vm.entityId = selectedEntity.hasOwnProperty('entityId') ? selectedEntity.entityId : entityId;\n    \n    vm.editEntityFormGroup = vm.fb.group({\n        entityLabel: [null, [vm.validators.required]],\n    });\n    \n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    async function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            assetService.getAsset(vm.entityId.id)\n        ]).subscribe(\n            function success(data) {\n                vm.entity = data[0];\n                getDeviceGroups();\n                vm.entityLabel = vm.entity.label;\n                vm.editEntityFormGroup.patchValue({\n                    entityLabel: vm.entity.label\n                }, {emitEvent: false});\n            },\n            function fail(){\n                vm.dialogRef.close(null);\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        let tasks = [];\n        let nameSplit = vm.entity.name.split(\"--\");\n        let group = getDeviceGroupByName(vm.groups, vm.entity.name);\n        if (nameSplit[1] != 'Pending' && nameSplit[1] != 'Root') {\n            vm.entity.name = nameSplit[0] + '--' + formValues.entityLabel;\n        }\n        vm.entity.label = formValues.entityLabel;\n        tasks.push(assetService.saveAsset(vm.entity));\n        // We don't want to create the root group that never will have devices\n        if (nameSplit[1] != 'Root') {\n            if (!group) {\n                group = {\n                    type: \"DEVICE\",\n                    ownerId: vm.entity.ownerId,\n                    customerId: vm.entity.customerId\n                };\n            }\n            if (!group.additionalInfo || (group.additionalInfo && typeof group.additionalInfo === 'string') ) {\n                group.additionalInfo = {};\n            } \n            group.additionalInfo.description = formValues.entityLabel;\n            group.name = vm.entity.name;\n            tasks.push(entityGroupService.saveDeviceEntityGroup(group));\n        }\n        return widgetContext.rxjs.forkJoin(tasks);\n    }\n    \n    async function getDeviceGroups() {\n        vm.groups = await entityGroupService.getEntityGroupsByOwnerId(vm.entity.ownerId.entityType, vm.entity.ownerId.id, 'DEVICE').toPromise();\n    }\n\n    function getDeviceGroupByName(groups, name) {\n        for (let i = 0; i < groups.length; i++) {\n            let group = groups[i];\n            if (group.name == name) {\n                return group;\n            }\n        }\n        return null;\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "6efaf489-d48c-01eb-2a00-23f7f24473ef"
              }, {
                "name" : "{i18n:basic-dashboard.hierarchy-widget.addNewFolder}",
                "icon" : "create_new_folder",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('ASSET', 'WRITE') && check_perms('GROUP', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "\n<!--========================================================================-->\n<!--=========================  Add entity example  =========================-->\n<!--========================================================================-->\n<!---->\n<form #addEntityForm=\"ngForm\" [formGroup]=\"addEntityFormGroup\"\n      (ngSubmit)=\"save()\" class=\"add-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>{{\"basic-dashboard.hierarchy-widget.addFolder\" | translate:selectedEntity }}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>{{\"converter.name\" | translate }}</mat-label>\n                <input matInput formControlName=\"entityLabel\" >\n            </mat-form-field>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            {{\"action.cancel\" | translate }}\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || addEntityForm.invalid || !addEntityForm.dirty\">\n            {{\"action.create\" | translate }}\n        </button>\n    </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\nlet $scope = widgetContext.$scope;\nlet $injector = $scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet selectedEntity = widgetContext.stateController.getStateParams().OnOrganigramSelected;\nlet translate = widgetContext.translate;\nif (!selectedEntity) {\n    dialogs.alert(translate.instant('event.error'), translate.instant(\"basic-dashboard.hierarchy-widget.noFolder\"), translate.instant('action.close'));\n    return false;\n}\n\nopenAddEntityDialog();\n\nfunction openAddEntityDialog() {\n    customDialog.customDialog(htmlTemplate, AddEntityDialogController).subscribe();\n}\n\nfunction AddEntityDialogController(instance) {\n    let vm = instance;\n    \n    let nameSplit = selectedEntity.entityName.split(\"--\");\n    if (nameSplit[1] == 'Pending') {\n        dialogs.alert(\n            translate.instant('event.error'), \n            translate.instant('basic-dashboard.hierarchy-widget.createNotAllowed', {\n                \"entityLabel\": selectedEntity.entityLabel\n            }), \n            translate.instant('action.close')\n        );\n        vm.dialogRef.close(null);\n    }\n    \n    vm.selectedEntity = selectedEntity;\n\n    vm.addEntityFormGroup = vm.fb.group({\n     entityLabel: ['', [vm.validators.required]],\n    });\n    \n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.addEntityFormGroup.markAsPristine();\n        saveEntityObservable().subscribe(\n            function (entity) {\n                widgetContext.rxjs.forkJoin([\n                    saveRelations(entity.id),\n                    saveGroupObservable(entity)\n                ]).subscribe(\n                    function () {\n                        widgetContext.updateAliases();\n                        vm.dialogRef.close(null);\n                    }\n                );\n            }\n        );\n    };\n\n    function saveEntityObservable() {\n        const formValues = vm.addEntityFormGroup.value;\n        let entityName = vm.namespacePrefix + '--' + formValues.entityLabel;\n        let entity = {\n            name: entityName,\n            type: selectedEntity.relationType,\n            label: formValues.entityLabel,\n            ownerId: selectedEntity.ownerId,\n            customerId: selectedEntity.customerId\n        };\n        return assetService.saveAsset(entity);\n    }\n    \n    function saveGroupObservable(asset) {\n        let entity = {\n            name: asset.name,\n            additionalInfo: {description: asset.label},\n            type: \"DEVICE\",\n            ownerId: selectedEntity.ownerId,\n            customerId: selectedEntity.customerId\n        };\n        return entityGroupService.saveDeviceEntityGroup(entity);\n    }\n    \n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            assetService.getAsset(selectedEntity.entityId.id),\n        ]).subscribe(\n            function success (data) {\n                selectedEntity.ownerId = data[0].ownerId;\n                selectedEntity.customerId = data[0].customerId;\n                getNamespacePrefix(data[0].ownerId);\n            },\n            function fail () {\n                vm.dialogRef.close(null);    \n            }\n        );\n    }\n    \n    function getNamespacePrefix(namespaceEntityId) {\n        widgetContext.rxjs.forkJoin([\n            attributeService.getEntityAttributes(namespaceEntityId, 'SERVER_SCOPE'),\n        ]).subscribe(\n            function success (data) {\n                let entityattributes = getEntityAttributes(data[0]);\n                if (!entityattributes.hasOwnProperty(\"namespacePrefix\")) {\n                    dialogs.alert(\n                        translate.instant('event.error'), \n                        translate.instant('basic-dashboard.hierarchy-widget.noNamespace'), \n                        translate.instant('action.close')\n                    );\n                    vm.dialogRef.close(null);\n                }\n                vm.namespacePrefix = entityattributes.namespacePrefix;\n            },\n            function fail() {\n                vm.dialogRef.close(null);\n            }\n        );\n    }\n    \n    function getEntityAttributes(attributes) {\n        let attrObj = {};\n        for (var i = 0; i < attributes.length; i++) {\n            attrObj[attributes[i].key] = attributes[i].value;\n        }\n        return attrObj;\n    }\n    \n    function saveRelations(entityId) {\n        let data = dataArrayToObject(widgetContext.data);\n        let relation = {\n            type: selectedEntity.relationType,\n            from: selectedEntity.entityId,\n            to: entityId\n        };\n        return entityRelationService.saveRelation(relation);\n    }\n    \n    function dataArrayToObject(arr) {\n    \treturn arr.reduce((obj, item) => {\n    \t\treturn {\n    \t\t\t...obj,\n    \t\t\t[item[\"dataKey\"][\"name\"]]: item.data[0] && item.data[0][1],\n    \t\t};\n    \t}, {});\n    }\n    \n    function camelize(str) {\n       return str.replace(/\\W+(.)/g, function(match, chr)\n       {\n            return chr.toUpperCase();\n        });\n    }\n}\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "05008161-a86c-b356-4327-c7bc1ff13099"
              }, {
                "name" : "{i18n:basic-dashboard.hierarchy-widget.deleteFolder}",
                "icon" : "delete",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('ASSET', 'WRITE') && check_perms('GROUP', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "/*=======================================================================*/\n/*=====  There are three examples: for delete, edit and add entity  =====*/\n/*=======================================================================*/\n/*=======================  Delete entity example  =======================*/\n/*=======================================================================*/\nlet $scope = widgetContext.$scope;\nlet $injector = $scope.$injector;\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet assetService = $injector.get(widgetContext.servicesMap.get('assetService'));\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet selectedEntity = widgetContext.stateController.getStateParams().OnOrganigramSelected;\nlet translate = widgetContext.translate;\nif (!selectedEntity) {\n    let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n    dialogs.alert(translate.instant('event.error'), translate.instant(\"basic-dashboard.hierarchy-widget.noFolder\"), translate.instant('action.close'));\n    return false;\n}\n\nlet pendingFolder;\nopenDeleteEntityDialog();\n\nasync function openDeleteEntityDialog() {\n    let title = translate.instant('action.delete') + ' ' + selectedEntity.entityLabel;\n    if (endsWith(selectedEntity.entityName, 'Root') || endsWith(selectedEntity.entityName, 'Pending')) {\n        let content = translate.instant('basic-dashboard.hierarchy-widget.deleteRequiredFolderError', {\n            \"folderName\": selectedEntity.entityLabel,\n        });         \n        dialogs.alert(title, content, translate.instant('action.cancel'));\n    } else {\n        pendingFolder = await getPendingFolder(selectedEntity.entityName);\n        if (!pendingFolder) {\n            showErrorDialog();\n            return false;\n        }\n        let content = translate.instant('basic-dashboard.hierarchy-widget.deleteFolderConfirmation', {\n            \"folderName\": selectedEntity.entityLabel,\n            \"pendingFolder\": pendingFolder.label\n        });\n                     \n        dialogs.confirm(title, content, translate.instant('action.cancel'), translate.instant('action.delete')).subscribe(\n            function(result) {\n                if (result) {\n                    deleteEntity();\n                }\n            }\n        );\n    }\n}\n\nfunction endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n\nasync function deleteEntity() {\n    let relations = await getEntityFromRelations();\n    let groups = await getDeviceGroups();\n    if (relations.to.length == 0) {\n        showErrorDialog();\n        return false;\n    }\n    widgetContext.rxjs.forkJoin([\n        saveNewRelations(relations, groups),\n        deleteEntityObservable(),\n        deleteGroupObservable(groups)\n    ]).subscribe(\n        function success() {\n            widgetContext.updateAliases();\n        },\n        function fail() {\n            showErrorDialog();\n        }\n    );\n}\n\nfunction deleteEntityObservable() {\n    return assetService.deleteAsset(selectedEntity.entityId.id);\n}\n\nfunction deleteGroupObservable(groups) {\n    let group = getDeviceGroupByName(groups, selectedEntity.entityName);\n    if (group) {\n        return widgetContext.rxjs.forkJoin([entityGroupService.deleteEntityGroup(group.id.id)]);\n    }\n    return widgetContext.rxjs.of([]);\n\n}\n\nasync function getEntityFromRelations() {\n    let relations = {};\n    relations.to = await entityRelationService.findByToAndType(selectedEntity.entityId, selectedEntity.relationType).toPromise();\n    relations.from = await entityRelationService.findByFromAndType(selectedEntity.entityId, selectedEntity.relationType).toPromise();\n    return relations;\n}\n\nasync function getDeviceGroups() {\n    let asset = await assetService.getAsset(selectedEntity.entityId.id).toPromise();\n    let groups = await entityGroupService.getEntityGroupsByOwnerId(asset.ownerId.entityType, asset.ownerId.id, 'DEVICE', asset.label).toPromise();\n    return groups;\n}\n\nfunction saveNewRelations(relations, groups) {\n    let assetRelatedEntity = relations.to[0].from;\n    let group = getDeviceGroupByName(groups, pendingFolder.name);\n    let tasks = [];\n    let deviceIds = [];\n    for (var i = 0; i < relations.from.length; i++) {\n        let relation = {\n            type: selectedEntity.relationType,\n            to: relations.from[i].to,\n            from: relations.from[i].to.entityType === \"ASSET\" ? assetRelatedEntity : pendingFolder.id,\n        };\n        tasks.push(entityRelationService.saveRelation(relation));\n        if (relations.from[i].to.entityType == \"DEVICE\") {\n            deviceIds.push(relations.from[i].to.id);\n        }\n        //añadir a grupo pendingFolder.label\n    }\n    if (tasks.length > 0) {\n        if (deviceIds.length > 0) {\n            tasks.push(entityGroupService.addEntitiesToEntityGroup(group.id.id, deviceIds));\n        }\n        return widgetContext.rxjs.forkJoin(tasks);\n    }\n    return widgetContext.rxjs.of([]);\n}\n\nfunction getDeviceGroupByName(groups, name) {\n    for (let i = 0; i < groups.length; i++) {\n        let group = groups[i];\n        if (group.name == name) {\n            return group;\n        }\n    }\n    return null;\n}\n\nasync function getPendingFolder(entityName) {\n    let pendingFolderName = entityName.split(\"--\")[0] + '--Pending';\n    let assets = await assetService.getUserAssets(widgetContext.pageLink(1, 0, pendingFolderName)).toPromise();\n    return assets.data.length > 0 ? assets.data[0] : null;\n}\n\nfunction showErrorDialog() {\n    let title = translate.instant('event.error');\n    let content = translate.instant('basic-dashboard.hierarchy-widget.genericError');\n    dialogs.alert(title, content, 'CLOSE').subscribe(\n        function(result) {}\n    );\n}\n",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "4a42430c-8881-5c68-141c-6321b8230bb5"
              }, {
                "name" : "{i18n:ota-update.assign-firmware}",
                "icon" : "memory",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "//widgetContext.dashboard.authUser\nif (data.length > 0) {\n    if (data[0].entityType == 'TENANT') {\n        return true;\n    } else if (data[0].entityType == 'CUSTOMER') {\n        if (data[0].billPlan.search('pro') > -1 && check_perms('GROUP', 'WRITE')) {\n            return true;\n        }\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>{{\"ota-update.assign-firmware\" | translate}} {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div *ngIf=\"entity.groupId\" mat-dialog-content fxLayout=\"column\">\n        <tb-ota-package-autocomplete\n            [useFullEntityId]=\"true\"\n            [deviceGroupId]=\"entity.groupId.id\"\n            formControlName=\"firmwareId\">\n        </tb-ota-package-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            {{\"action.cancel\" | translate}}\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            {{\"action.save\" | translate}}\n        </button>\n    </div>\n</form>",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet entityGroupService = $injector.get(widgetContext.servicesMap.get('entityGroupService'));\nlet selectedEntity = widgetContext.stateController.getStateParams().OnOrganigramSelected;\nif (!selectedEntity) {\n    let dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\n    dialogs.alert(translate.instant('event.error'), translate.instant(\"basic-dashboard.hierarchy-widget.noFolder\"), translate.instant('action.close'));\n    return false;\n}\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n    vm.entityId = selectedEntity.hasOwnProperty('entityId') ? selectedEntity.entityId : entityId;\n    vm.entityName = selectedEntity.hasOwnProperty('entityLabel') ? selectedEntity.entityLabel : selectedEntity.entityName;\n   \n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        firmwareId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        saveEntity().subscribe(\n            function () {\n                // widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n\n    function getEntityInfo() {\n        entityService.getEntity(selectedEntity.entityId.entityType, selectedEntity.entityId.id).subscribe(\n            function (asset) {\n                entityGroupService.getEntityGroupsByOwnerId(asset.ownerId.entityType, asset.ownerId.id, 'DEVICE', asset.label).subscribe(\n                    function (groups) {\n                        let group = getDeviceGroupByName(groups, selectedEntity.entityName);\n                        if (group) {\n                            vm.entity.groupId = group.id;\n                            vm.entity.otaPackageType = \"FIRMWARE\";\n                            entityGroupService.otaPackageService.getOtaPackageInfoByDeviceGroupId(group.id.id, 'FIRMWARE').subscribe(\n                                    function (otaPackage) {\n                                        if (otaPackage) {\n                                            vm.entity = otaPackage;\n                                            vm.editEntityFormGroup.patchValue({\n                                                firmwareId: otaPackage.otaPackageId\n                                            }, {emitEvent: false});\n                                        }\n                                    }\n                                );\n                        }\n                    }\n                );\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        if (formValues.firmwareId) {\n            vm.entity.otaPackageId = formValues.firmwareId;\n            return entityGroupService.saveDeviceGroupOtaPackage(vm.entity);\n        } else if (vm.entity.id) {\n            return entityGroupService.deleteDeviceGroupOtaPackage(vm.entity.id);\n        }\n    }\n\n    function getDeviceGroupByName(groups, name) {\n        if (groups) {\n            for (let i = 0; i < groups.length; i++) {\n                let group = groups[i];\n                if (group.name == name) {\n                    return group;\n                }\n            }\n        }\n        return null;\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "dc0aee26-4270-3c35-8c19-54ab7e705104"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.autoAuth}",
                "icon" : "mdi:refresh-auto",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('DEVICE', 'WRITE_ATTRIBUTES')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $scope = widgetContext.$scope;\nlet $injector = $scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet selectedEntity = widgetContext.stateController.getStateParams().OnOrganigramSelected;\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet translate = widgetContext.translate;\n\nopenDialog();\n\nfunction openDialog() {\n    let title = translate.instant('basic-dashboard.smallWidgetTitles.autoAuth');\n        \n    let content = translate.instant('basic-dashboard.smallWidgetTitles.autoAuthFolderDialog', {\n        \"folderName\": selectedEntity.entityLabel\n    });\n                     \n    dialogs.confirm(title, content, translate.instant('action.cancel'), translate.instant('action.apply')).subscribe(\n        function(result) {\n            if (result) {\n                getDevices();\n            }\n        }\n    );\n}\n\nfunction getDevices() {\n    var query = {\n        parameters: {\n            rootId: selectedEntity.entityId.id,\n            rootType: selectedEntity.entityId.entityType,\n            direction: \"FROM\",\n            maxLevel: 20\n        },\n        filters: [{\n            relationType: selectedEntity.relationType,\n            entityTypes: [\"DEVICE\"]\n        }]\n    };\n    entityRelationService.findInfoByQuery(query).subscribe(\n        function(devices) {\n            for (let i in devices) {\n                set_ota_auth_by_default(devices[i]);\n            }\n        }\n        /*function (error) {\n            $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n        }*/\n    );\n    //$scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n}\n\nfunction set_ota_auth_by_default(device) {\n    attributeService.saveEntityAttributes(device.to, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: true}]).subscribe(\n        /*function () {\n            console.log(\"success!\");\n        },\n        function (error) {\n            $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n        }*/\n    );\n}",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "ad31a23d-7593-d1f5-ebc6-72b964546d58"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.manualAuth}",
                "icon" : "mdi:gesture-tap",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('DEVICE', 'WRITE_ATTRIBUTES')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $scope = widgetContext.$scope;\nlet $injector = $scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet dialogs = $injector.get(widgetContext.servicesMap.get('dialogs'));\nlet selectedEntity = widgetContext.stateController.getStateParams().OnOrganigramSelected;\nlet entityRelationService = $injector.get(widgetContext.servicesMap.get('entityRelationService'));\nlet translate = widgetContext.translate;\n\nopenDialog();\n\nfunction openDialog() {\n    let title = translate.instant('basic-dashboard.smallWidgetTitles.manualAuth');\n        \n    let content = translate.instant('basic-dashboard.smallWidgetTitles.manualAuthFolderDialog', {\n        \"folderName\": selectedEntity.entityLabel\n    });\n                     \n    dialogs.confirm(title, content, translate.instant('action.cancel'), translate.instant('action.apply')).subscribe(\n        function(result) {\n            if (result) {\n                getDevices();\n            }\n        }\n    );\n}\n\nfunction getDevices() {\n    var query = {\n        parameters: {\n            rootId: selectedEntity.entityId.id,\n            rootType: selectedEntity.entityId.entityType,\n            direction: \"FROM\",\n            maxLevel: 20\n        },\n        filters: [{\n            relationType: selectedEntity.relationType,\n            entityTypes: [\"DEVICE\"]\n        }]\n    };\n    entityRelationService.findInfoByQuery(query).subscribe(\n        function(devices) {\n            for (let i in devices) {\n                set_ota_auth_by_default(devices[i]);\n            }\n        }\n        /*function (error) {\n            $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n        }*/\n    );\n    //$scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n}\n\nfunction set_ota_auth_by_default(device) {\n    attributeService.saveEntityAttributes(device.to, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: false}]).subscribe(\n        /*function () {\n            console.log(\"success!\");\n        },\n        function (error) {\n            $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n        }*/\n    );\n}",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "fdd7dbe4-47ab-1906-e92f-b88c1fc1ab00"
              }, {
                "name" : "{i18n:basic-dashboard.hierarchy-widget.iconHelp.iconHelp}",
                "icon" : "help",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<form style=\"width: 480px\">\r\n\t<mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n\t\t<h2>{{\"basic-dashboard.hierarchy-widget.iconHelp.modalTitle\" | translate}}</h2>\r\n\t\t<span fxFlex></span>\r\n\t\t<button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n\t\t\t<mat-icon class=\"material-icons\">close</mat-icon>\r\n\t\t</button>\r\n\t</mat-toolbar>\r\n\t<mat-progress-bar\r\n\t\tcolor=\"warn\"\r\n\t\tmode=\"indeterminate\"\r\n\t\t*ngIf=\"isLoading$ | async\"\r\n\t>\r\n\t</mat-progress-bar>\r\n\t<div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n\t<div mat-dialog-content>\r\n\t\t<div class=\"mat-padding\" fxLayout=\"column\">\r\n\t\t\t<section>\r\n\t\t\t\t<h4>{{\"basic-dashboard.hierarchy-widget.iconHelp.title\" | translate}}</h4>\r\n\t\t\t\t<table class=\"icon-table\">\r\n\t\t\t\t\t<tr *ngFor=\"let item of iconStates\">\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<mat-icon [class]=\"item.class\"> {{ item.icon }} </mat-icon>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td>{{ item.info }}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</section>\r\n\t\t\t<section *ngIf=\"helpInfo.length > 0\">\r\n\t\t\t\t<h4>Extra information</h4>\r\n\t\t\t\t<table class=\"icon-table\">\r\n\t\t\t\t\t<tr *ngFor=\"let item of helpInfo\">\r\n\t\t\t\t\t\t<td>{{ item.title }}</td>\r\n\t\t\t\t\t\t<td>{{ item.description }}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t</div>\r\n\t<div mat-dialog-actions fxLayout=\"row\">\r\n\t\t<span fxFlex></span>\r\n\t\t<button\r\n\t\t\tmat-button\r\n\t\t\tcolor=\"primary\"\r\n\t\t\tstyle=\"margin-right: 20px\"\r\n\t\t\ttype=\"button\"\r\n\t\t\t[disabled]=\"(isLoading$ | async)\"\r\n\t\t\t(click)=\"cancel()\"\r\n\t\t\tcdkFocusInitial\r\n\t\t>\r\n\t\t\tClose\r\n\t\t</button>\r\n\t</div>\r\n</form>\r\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get(\"customDialog\"));\r\n\r\nopenAddAssetDialog();\r\n\r\nfunction openAddAssetDialog() {\r\n\tcustomDialog.customDialog(htmlTemplate, AddAssetDialogController).subscribe();\r\n}\r\n\r\nasync function AddAssetDialogController(instance) {\r\n\tlet vm = instance;\r\n\tvm.iconStates = getIconStates();\r\n\tvm.helpInfo = getHelpInfo();\r\n\r\n\tvm.cancel = function () {\r\n\t\tvm.dialogRef.close(null);\r\n\t};\r\n}\r\n\r\n//Get information of the confirmation states\r\nfunction getIconStates() {\r\n    let translate = widgetContext.translate;\r\n\treturn [\r\n\t    {icon: 'radio_button_checked', info: translate.instant('basic-dashboard.hierarchy-widget.iconHelp.myRoot')},\r\n\t    {icon: 'folder_special', info: translate.instant('basic-dashboard.hierarchy-widget.iconHelp.myPending')},\r\n\t    {icon: 'folder', info: translate.instant('basic-dashboard.hierarchy-widget.iconHelp.myFolders')},\r\n\t    {icon: 'radio_button_unchecked', info: translate.instant('basic-dashboard.hierarchy-widget.iconHelp.otherRoot')},\r\n\t    {icon: 'crop_din', info: translate.instant('basic-dashboard.hierarchy-widget.iconHelp.otherPending')},\r\n\t    {icon: 'folder_open', info: translate.instant('basic-dashboard.hierarchy-widget.iconHelp.otherFolders')},\r\n\t    {icon: 'devices_other', info: translate.instant('device.devices')},\r\n    ];\r\n}\r\n\r\n//Get extra help information\r\nfunction getHelpInfo() {\r\n    return [];\r\n}\r\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "6e59fdd0-0926-7fc6-eee9-e55e5f2232a8"
              } ]
            },
            "displayTimewindow" : true,
            "showTitleIcon" : false,
            "titleTooltip" : "",
            "enableDataExport" : false,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "a3ffc20b-fe2d-1a93-c1f3-75a859ebffea"
        },
        "8bc002ec-2917-0d04-029b-0f17d08c4d12" : {
          "typeFullFqn" : "system.action_button",
          "type" : "latest",
          "sizeX" : 3,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1729605192279,
                  "endTimeMs" : 1729691592279
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#FFFFFF01",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "activatedState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "disabledState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "executeRpc" : {
                  "method" : null,
                  "requestTimeout" : null,
                  "requestPersistent" : null,
                  "persistentPollingInterval" : null
                },
                "getAttribute" : {
                  "scope" : null,
                  "key" : "state"
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;",
                  "compareToValue" : "device_connectivity"
                }
              },
              "appearance" : {
                "type" : "filled",
                "showLabel" : true,
                "label" : "Firmware",
                "showIcon" : true,
                "icon" : "keyboard_return",
                "iconSize" : 24,
                "iconSizeUnit" : "px",
                "mainColor" : "var(--tb-primary-500)",
                "backgroundColor" : "#FFFFFF",
                "autoScale" : true,
                "customStyle" : {
                  "enabled" : null,
                  "hovered" : null,
                  "pressed" : null,
                  "activated" : null,
                  "disabled" : null
                }
              }
            },
            "title" : "Action button",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "4px",
            "configMode" : "advanced",
            "actions" : {
              "click" : [ {
                "id" : "84b10c3a-0231-07da-622b-3993514c02a8",
                "name" : "onClick",
                "icon" : "more_horiz",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "default",
                "openRightLayout" : false,
                "setEntityId" : false,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "customHtml" : "<!--=======================================================================-->\n<!--=====  There are two example templates: for edit and add entity   =====-->\n<!--=======================================================================-->\n<!--========================  Edit entity example  ========================-->\n<!--=======================================================================-->\n \n<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>{{\"action.edit\" | translate }} {{entityLabel}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div mat-dialog-content fxLayout=\"column\">\n        <div fxLayout=\"row\" fxLayoutGap=\"8px\" fxLayout.xs=\"column\"  fxLayoutGap.xs=\"0\">\n            <mat-form-field fxFlex class=\"mat-block\">\n                <mat-label>{{\"converter.name\" | translate }}</mat-label>\n                <input matInput formControlName=\"entityLabel\" >\n            </mat-form-field>\n        </div>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            {{\"action.cancel\" | translate}}\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            {{\"action.save\" | translate}}\n        </button>\n    </div>\n</form>\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\nlet $scope = widgetContext.$scope;\nlet $injector = $scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    \n    let vm = instance;\n    \n    vm.entityId = entityId;\n    \n    vm.entityName = entityName;\n    \n    vm.editEntityFormGroup = vm.fb.group({\n        entityLabel: [null, [vm.validators.required]],\n    });\n    \n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        widgetContext.rxjs.forkJoin([\n            saveEntity()\n        ]).subscribe(\n            function () {\n                widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n    \n    function getEntityInfo() {\n        widgetContext.rxjs.forkJoin([\n            deviceService.getDevice(vm.entityId.id)\n        ]).subscribe(\n            function success(data) {\n                vm.entity = data[0];\n                vm.entityLabel = vm.entity.label;\n                vm.editEntityFormGroup.patchValue({\n                    entityLabel: vm.entity.label\n                }, {emitEvent: false});\n            },\n            function fail(){\n                vm.dialogRef.close(null);\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        vm.entity.label = formValues.entityLabel;\n        return deviceService.saveDevice(vm.entity);\n    }\n    \n}",
                "customResources" : [ ]
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "8bc002ec-2917-0d04-029b-0f17d08c4d12"
        },
        "11039d20-a1be-5c6c-bc01-045b3f6d090e" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375964,
                  "endTimeMs" : 1674061775964
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Devices",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : false,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "false",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "{i18n:device.device}",
              "displayEntityLabel" : true,
              "entityLabelColumnTitle" : "{i18n:asset.label}",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "New Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "579f0468-9ce9-7e3e-b34c-88dd3de59897",
              "dataKeys" : [ {
                "name" : "booted.tag",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.deviceTable.fwVersion}",
                "color" : "#ffeb3b",
                "settings" : { },
                "_hash" : 0.5365174899107905,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "booted.installed",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.smallWidgetTitles.installationDate}",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.8723446414034588,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_title",
                "type" : "timeseries",
                "label" : "Target FW title",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.9934225682766313,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_version",
                "type" : "timeseries",
                "label" : "Target FW version",
                "color" : "#607d8b",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.5251724416842531,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_ts",
                "type" : "timeseries",
                "label" : "Target FW set time",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : true,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "cellContentFunction" : "if (value !== '') {\n    return ctx.date.transform(value, 'yyyy-MM-dd HH:mm:ss');\n}\nreturn '';"
                },
                "_hash" : 0.31823244858578237,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "Status",
                "color" : "#f44336",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "130px",
                  "useCellStyleFunction" : true,
                  "cellStyleFunction" : "if (value == 'FAILED') {\n    return {'color' : '#D93025'};\n}\nreturn {};",
                  "useCellContentFunction" : true,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "function icon(value) {\n    if (value == 'QUEUED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000;\"><svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M6,2V8H6V8L10,12L6,16V16H6V22H18V16H18V16L14,12L18,8V8H18V2H6M16,16.5V20H8V16.5L12,12.5L16,16.5M12,11.5L8,7.5V4H16V7.5L12,11.5Z\" /></svg></mat-icon>';\n    }\n    if (value == 'INITIATED' || value == 'DOWNLOADING' || value == 'DOWNLOADED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">downloading</mat-icon>';\n    }\n    if (value == 'VERIFIED' || value == 'UPDATING' ) {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">update</mat-icon>';\n    }\n    if (value == 'UPDATED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">download_done</mat-icon>';\n    }\n    if (value == 'READY_TO_INSTALL') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">thumb_up</mat-icon>';\n    }\n    if (value == 'FAILED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #D93025\">warning</mat-icon>';\n    }\n    if (value == 'INSTALLED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">install_desktop</mat-icon>';\n    }\n    if (value == 'Flashed by uSD') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">sd_storage</mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_AUTHORIZATION') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #043d5d\">gesture_tap_button</mat-icon>';\n    }\n    if (value == 'WAITING_DOWNLOAD_CONDITIONS') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #043d5d\">gesture_swipe_down</mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_CONDITIONS') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #043d5d\">cellphone_cog</mat-icon>';\n    }\n    return '';\n}\nfunction capitalize (s) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase().replace(/_/g, \" \");\n}\n\nreturn icon(value) + '<span style=\"vertical-align: super;padding-left: 8px;\">' + capitalize(value) + '</span>';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7764426948615217,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null,
                "aggregationType" : "NONE"
              }, {
                "name" : "fw_checksum",
                "type" : "attribute",
                "label" : "fw_checksum",
                "color" : "#3f51b5",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.5594087842471693,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_url",
                "type" : "attribute",
                "label" : "fw_url",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.4204673738685043,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "ota_auth_by_default",
                "type" : "attribute",
                "label" : "Auth",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.029349555334992727,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "if (!value || value === 'true') {\n    return 'Auto';\n}\nreturn 'Manual';"
              }, {
                "name" : "ota_auth",
                "type" : "attribute",
                "label" : "ota_auth",
                "color" : "#ffeb3b",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "never"
                },
                "_hash" : 0.6944307776462175,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "actions" : {
              "actionCellButton" : [ {
                "name" : "History firmware update",
                "icon" : "history",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_firmware_history",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "98a1406c-3301-bc2f-2c5d-d637ce3b663b"
              }, {
                "name" : "{i18n:ota-update.assign-firmware}",
                "icon" : "memory",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('DEVICE', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit firmware {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div *ngIf=\"entity.deviceProfileId\" mat-dialog-content fxLayout=\"column\">\n        <tb-ota-package-autocomplete\n            [useFullEntityId]=\"true\"\n            [deviceProfileId]=\"entity.deviceProfileId.id\"\n            formControlName=\"firmwareId\">\n        </tb-ota-package-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : "form {\n    min-width: 300px !important;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        firmwareId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        saveEntity().subscribe(\n            function () {\n                // widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n\n    function getEntityInfo() {\n        entityService.getEntity(entityId.entityType, entityId.id).subscribe(\n            function (data) {\n                vm.entity = data;\n                vm.editEntityFormGroup.patchValue({\n                    firmwareId: vm.entity.firmwareId\n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        vm.entity.firmwareId = formValues.firmwareId;\n        return deviceService.saveDevice(vm.entity);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "23099c1d-454b-25dc-8bc0-7cf33c21c5d5"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.autoAuth}",
                "icon" : "mdi:refresh-auto",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Manual') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Manual') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "994bad3a-ddf3-0e90-01d8-04150f0ba498"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.manualAuth}",
                "icon" : "mdi:gesture-tap",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Auto') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Auto') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: false}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a2594ee5-e1aa-fd7c-2256-cefa6f5432a0"
              }, {
                "name" : "Allow installation",
                "icon" : "mdi:wrench-cog",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "let ota_auth = data.ota_auth ? data.ota_auth : 'false';\nif (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\nif (check_perms('DEVICE', 'RPC_CALL') && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9ae4c19e-73ce-f2dd-26f2-bcb984cd99e9"
              } ],
              "rowClick" : [ {
                "name" : "Select device",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "setEntityId" : true,
                "stateEntityParamName" : "SelectedDevice",
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "ab1124c2-9562-ed25-9a8f-6a68887a2ac2"
              } ]
            },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "11039d20-a1be-5c6c-bc01-045b3f6d090e",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "505fb066-122f-5d7f-80f4-40f63dd299d1" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375964,
                  "endTimeMs" : 1674061775964
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Devices",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : false,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "false",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "{i18n:device.device}",
              "displayEntityLabel" : true,
              "entityLabelColumnTitle" : "{i18n:asset.label}",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "New Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "6044e198-df64-cd76-f339-696f220c4943",
              "dataKeys" : [ {
                "name" : "booted.tag",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.deviceTable.fwVersion}",
                "color" : "#ffeb3b",
                "settings" : { },
                "_hash" : 0.5365174899107905,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "booted.installed",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.smallWidgetTitles.installationDate}",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.8723446414034588,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_title",
                "type" : "timeseries",
                "label" : "Target FW title",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.9934225682766313,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_version",
                "type" : "timeseries",
                "label" : "Target FW version",
                "color" : "#607d8b",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.5251724416842531,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_ts",
                "type" : "timeseries",
                "label" : "Target FW set time",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : true,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "cellContentFunction" : "if (value !== '') {\n    return ctx.date.transform(value, 'yyyy-MM-dd HH:mm:ss');\n}\nreturn '';"
                },
                "_hash" : 0.31823244858578237,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "Status",
                "color" : "#f44336",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "130px",
                  "useCellStyleFunction" : true,
                  "cellStyleFunction" : "if (value == 'FAILED') {\n    return {'color' : '#D93025'};\n}\nreturn {};",
                  "useCellContentFunction" : true,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "function icon(value) {\n    if (value == 'UPDATED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">download_done</mat-icon>';\n    }\n    if (value == 'UNASSIGNED') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"monitor-shimmer\" data-mat-icon-namespace=\"mdi\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-monitor-shimmer\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M21 16H3V4H21M21 2H3C1.89 2 1 2.89 1 4V16C1 17.11 1.9 18 3 18H10V20H8V22H16V20H14V18H21C22.11 18 23 17.11 23 16V4C23 2.89 22.1 2 21 2M15 5.5L14.38 6.87L13 7.5L14.38 8.13L15 9.5L15.63 8.13L17 7.5L15.63 6.87L15 5.5M10.5 7.5L9.41 9.91L7 11L9.41 12.09L10.5 14.5L11.6 12.09L14 11L11.6 9.91L10.5 7.5\"></path></svg></mat-icon>';\n    }\n    return '';\n}\nfunction capitalize (s) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase().replace(/_/g, \" \");\n}\n\nreturn icon(value) + '<span style=\"vertical-align: super;padding-left: 8px;\">' + capitalize(value) + '</span>';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7764426948615217,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null,
                "aggregationType" : "NONE"
              }, {
                "name" : "fw_checksum",
                "type" : "attribute",
                "label" : "fw_checksum",
                "color" : "#3f51b5",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.5594087842471693,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_url",
                "type" : "attribute",
                "label" : "fw_url",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.4204673738685043,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "ota_auth_by_default",
                "type" : "attribute",
                "label" : "Auth",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.029349555334992727,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "if (!value || value === 'true') {\n    return 'Auto';\n}\nreturn 'Manual';"
              }, {
                "name" : "ota_auth",
                "type" : "attribute",
                "label" : "ota_auth",
                "color" : "#ffeb3b",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "never"
                },
                "_hash" : 0.6944307776462175,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "actions" : {
              "actionCellButton" : [ {
                "name" : "History firmware update",
                "icon" : "history",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_firmware_history",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "98a1406c-3301-bc2f-2c5d-d637ce3b663b"
              }, {
                "name" : "{i18n:ota-update.assign-firmware}",
                "icon" : "memory",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('DEVICE', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit firmware {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div *ngIf=\"entity.deviceProfileId\" mat-dialog-content fxLayout=\"column\">\n        <tb-ota-package-autocomplete\n            [useFullEntityId]=\"true\"\n            [deviceProfileId]=\"entity.deviceProfileId.id\"\n            formControlName=\"firmwareId\">\n        </tb-ota-package-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : "form {\n    min-width: 300px !important;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        firmwareId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        saveEntity().subscribe(\n            function () {\n                // widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n\n    function getEntityInfo() {\n        entityService.getEntity(entityId.entityType, entityId.id).subscribe(\n            function (data) {\n                vm.entity = data;\n                vm.editEntityFormGroup.patchValue({\n                    firmwareId: vm.entity.firmwareId\n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        vm.entity.firmwareId = formValues.firmwareId;\n        return deviceService.saveDevice(vm.entity);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "23099c1d-454b-25dc-8bc0-7cf33c21c5d5"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.autoAuth}",
                "icon" : "mdi:refresh-auto",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Manual') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Manual') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "994bad3a-ddf3-0e90-01d8-04150f0ba498"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.manualAuth}",
                "icon" : "mdi:gesture-tap",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Auto') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Auto') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: false}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a2594ee5-e1aa-fd7c-2256-cefa6f5432a0"
              }, {
                "name" : "Allow installation",
                "icon" : "mdi:wrench-cog",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "let ota_auth = data.ota_auth ? data.ota_auth : 'false';\nif (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\nif (check_perms('DEVICE', 'RPC_CALL') && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9ae4c19e-73ce-f2dd-26f2-bcb984cd99e9"
              } ],
              "rowClick" : [ {
                "name" : "Select device",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "setEntityId" : true,
                "stateEntityParamName" : "SelectedDevice",
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "ab1124c2-9562-ed25-9a8f-6a68887a2ac2"
              } ]
            },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "505fb066-122f-5d7f-80f4-40f63dd299d1",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "056b9fb8-16e5-e22a-865d-ab4af09a7698" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375964,
                  "endTimeMs" : 1674061775964
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Devices",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : false,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "false",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "{i18n:device.device}",
              "displayEntityLabel" : true,
              "entityLabelColumnTitle" : "{i18n:asset.label}",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "New Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "bdbc6ea1-95a7-3912-341a-58dc7704a00f",
              "dataKeys" : [ {
                "name" : "booted.tag",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.deviceTable.fwVersion}",
                "color" : "#ffeb3b",
                "settings" : { },
                "_hash" : 0.5365174899107905,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "booted.installed",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.smallWidgetTitles.installationDate}",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.8723446414034588,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_title",
                "type" : "timeseries",
                "label" : "Target FW title",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.9934225682766313,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_version",
                "type" : "timeseries",
                "label" : "Target FW version",
                "color" : "#607d8b",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.5251724416842531,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_ts",
                "type" : "timeseries",
                "label" : "Target FW set time",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : true,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "cellContentFunction" : "if (value !== '') {\n    return ctx.date.transform(value, 'yyyy-MM-dd HH:mm:ss');\n}\nreturn '';"
                },
                "_hash" : 0.31823244858578237,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "Status",
                "color" : "#f44336",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "130px",
                  "useCellStyleFunction" : true,
                  "cellStyleFunction" : "if (value == 'FAILED') {\n    return {'color' : '#D93025'};\n}\nreturn {};",
                  "useCellContentFunction" : true,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "function icon(value) {\n    if (value == 'QUEUED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000;\"><svg style=\"width:24px;height:24px\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M6,2V8H6V8L10,12L6,16V16H6V22H18V16H18V16L14,12L18,8V8H18V2H6M16,16.5V20H8V16.5L12,12.5L16,16.5M12,11.5L8,7.5V4H16V7.5L12,11.5Z\" /></svg></mat-icon>';\n    }\n    if (value == 'INITIATED' || value == 'DOWNLOADING' || value == 'DOWNLOADED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">downloading</mat-icon>';\n    }\n    if (value == 'VERIFIED' || value == 'UPDATING' ) {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">update</mat-icon>';\n    }\n    if (value == 'UPDATED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">download_done</mat-icon>';\n    }\n    if (value == 'READY_TO_INSTALL') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">thumb_up</mat-icon>';\n    }\n    if (value == 'FAILED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #D93025\">warning</mat-icon>';\n    }\n    if (value == 'INSTALLED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">install_desktop</mat-icon>';\n    }\n    if (value == 'Flashed by uSD') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">sd_storage</mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_AUTHORIZATION') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #043d5d\">gesture_tap_button</mat-icon>';\n    }\n    if (value == 'WAITING_DOWNLOAD_CONDITIONS') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #043d5d\">gesture_swipe_down</mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_CONDITIONS') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #043d5d\">cellphone_cog</mat-icon>';\n    }\n    return '';\n}\nfunction capitalize (s) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase().replace(/_/g, \" \");\n}\n\nreturn icon(value) + '<span style=\"vertical-align: super;padding-left: 8px;\">' + capitalize(value) + '</span>';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7764426948615217,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null,
                "aggregationType" : "NONE"
              }, {
                "name" : "fw_checksum",
                "type" : "attribute",
                "label" : "fw_checksum",
                "color" : "#3f51b5",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.5594087842471693,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_url",
                "type" : "attribute",
                "label" : "fw_url",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.4204673738685043,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "ota_auth_by_default",
                "type" : "attribute",
                "label" : "Auth",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.029349555334992727,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "if (!value || value === 'true') {\n    return 'Auto';\n}\nreturn 'Manual';"
              }, {
                "name" : "ota_auth",
                "type" : "attribute",
                "label" : "ota_auth",
                "color" : "#ffeb3b",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "never"
                },
                "_hash" : 0.6944307776462175,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "actions" : {
              "actionCellButton" : [ {
                "name" : "History firmware update",
                "icon" : "history",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_firmware_history",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "98a1406c-3301-bc2f-2c5d-d637ce3b663b"
              }, {
                "name" : "{i18n:ota-update.assign-firmware}",
                "icon" : "memory",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('DEVICE', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit firmware {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div *ngIf=\"entity.deviceProfileId\" mat-dialog-content fxLayout=\"column\">\n        <tb-ota-package-autocomplete\n            [useFullEntityId]=\"true\"\n            [deviceProfileId]=\"entity.deviceProfileId.id\"\n            formControlName=\"firmwareId\">\n        </tb-ota-package-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : "form {\n    min-width: 300px !important;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        firmwareId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        saveEntity().subscribe(\n            function () {\n                // widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n\n    function getEntityInfo() {\n        entityService.getEntity(entityId.entityType, entityId.id).subscribe(\n            function (data) {\n                vm.entity = data;\n                vm.editEntityFormGroup.patchValue({\n                    firmwareId: vm.entity.firmwareId\n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        vm.entity.firmwareId = formValues.firmwareId;\n        return deviceService.saveDevice(vm.entity);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "23099c1d-454b-25dc-8bc0-7cf33c21c5d5"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.autoAuth}",
                "icon" : "mdi:refresh-auto",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Manual') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Manual') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "994bad3a-ddf3-0e90-01d8-04150f0ba498"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.manualAuth}",
                "icon" : "mdi:gesture-tap",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Auto') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Auto') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: false}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a2594ee5-e1aa-fd7c-2256-cefa6f5432a0"
              }, {
                "name" : "Allow installation",
                "icon" : "mdi:wrench-cog",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "let ota_auth = data.ota_auth ? data.ota_auth : 'false';\nif (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\nif (check_perms('DEVICE', 'RPC_CALL') && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9ae4c19e-73ce-f2dd-26f2-bcb984cd99e9"
              } ],
              "rowClick" : [ {
                "name" : "Select device",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "setEntityId" : true,
                "stateEntityParamName" : "SelectedDevice",
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "ab1124c2-9562-ed25-9a8f-6a68887a2ac2"
              } ]
            },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "056b9fb8-16e5-e22a-865d-ab4af09a7698",
          "typeFullFqn" : "system.cards.entities_table"
        },
        "a2c01444-fe68-a614-e519-20bff2dc116a" : {
          "typeFullFqn" : "system.action_button",
          "type" : "latest",
          "sizeX" : 3,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1730104988482,
                  "endTimeMs" : 1730191388482
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#FFFFFF01",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "activatedState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "disabledState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "appearance" : {
                "type" : "basic",
                "showLabel" : true,
                "label" : "{i18n:firmware-dashboard.deviceWaiting}",
                "showIcon" : true,
                "icon" : "hourglass_empty",
                "iconSize" : 24,
                "iconSizeUnit" : "px",
                "mainColor" : "var(--tb-primary-500)",
                "backgroundColor" : "#FFFFFF",
                "autoScale" : true,
                "customStyle" : {
                  "enabled" : null,
                  "hovered" : null,
                  "pressed" : null,
                  "activated" : null,
                  "disabled" : null
                }
              }
            },
            "title" : "Action button",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "4px",
            "configMode" : "advanced",
            "actions" : {
              "click" : [ {
                "id" : "5ef0e11e-b00e-e16d-a673-6ffb61acea6e",
                "name" : "onClick",
                "icon" : "more_horiz",
                "type" : "doNothing",
                "openInSeparateDialog" : false,
                "openInPopover" : false
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "a2c01444-fe68-a614-e519-20bff2dc116a"
        },
        "b8eb298c-c7b9-9a97-32d7-dcf9754ab098" : {
          "typeFullFqn" : "system.action_button",
          "type" : "latest",
          "sizeX" : 3,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1730104988482,
                  "endTimeMs" : 1730191388482
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#FFFFFF01",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "activatedState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "disabledState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "appearance" : {
                "type" : "basic",
                "showLabel" : true,
                "label" : "{i18n:firmware-dashboard.deviceUpdating}",
                "showIcon" : true,
                "icon" : "update",
                "iconSize" : 24,
                "iconSizeUnit" : "px",
                "mainColor" : "var(--tb-primary-500)",
                "backgroundColor" : "#FFFFFF",
                "autoScale" : true,
                "customStyle" : {
                  "enabled" : null,
                  "hovered" : null,
                  "pressed" : null,
                  "activated" : null,
                  "disabled" : null
                }
              }
            },
            "title" : "Action button",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "4px",
            "configMode" : "basic",
            "actions" : {
              "click" : [ {
                "id" : "5ef0e11e-b00e-e16d-a673-6ffb61acea6e",
                "name" : "onClick",
                "icon" : "more_horiz",
                "type" : "doNothing",
                "openInSeparateDialog" : false,
                "openInPopover" : false
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "b8eb298c-c7b9-9a97-32d7-dcf9754ab098"
        },
        "a5e19342-6dd0-fc0a-82ae-44afb0112897" : {
          "typeFullFqn" : "system.action_button",
          "type" : "latest",
          "sizeX" : 3,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1730104988482,
                  "endTimeMs" : 1730191388482
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#FFFFFF01",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "activatedState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "disabledState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "appearance" : {
                "type" : "basic",
                "showLabel" : true,
                "label" : "{i18n:firmware-dashboard.deviceFailed}",
                "showIcon" : true,
                "icon" : "warning",
                "iconSize" : 24,
                "iconSizeUnit" : "px",
                "mainColor" : "var(--tb-primary-500)",
                "backgroundColor" : "#FFFFFF",
                "autoScale" : true,
                "customStyle" : {
                  "enabled" : null,
                  "hovered" : null,
                  "pressed" : null,
                  "activated" : null,
                  "disabled" : null
                }
              }
            },
            "title" : "Action button",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "4px",
            "configMode" : "basic",
            "actions" : {
              "click" : [ {
                "id" : "5ef0e11e-b00e-e16d-a673-6ffb61acea6e",
                "name" : "onClick",
                "icon" : "more_horiz",
                "type" : "doNothing",
                "openInSeparateDialog" : false,
                "openInPopover" : false
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "a5e19342-6dd0-fc0a-82ae-44afb0112897"
        },
        "14370a39-3269-26de-636b-e28eff6a9a15" : {
          "typeFullFqn" : "system.action_button",
          "type" : "latest",
          "sizeX" : 3,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1730104988482,
                  "endTimeMs" : 1730191388482
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#FFFFFF01",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "activatedState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "disabledState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "appearance" : {
                "type" : "basic",
                "showLabel" : true,
                "label" : "{i18n:firmware-dashboard.deviceUpdated}",
                "showIcon" : true,
                "icon" : "download_done",
                "iconSize" : 24,
                "iconSizeUnit" : "px",
                "mainColor" : "var(--tb-primary-500)",
                "backgroundColor" : "#FFFFFF",
                "autoScale" : true,
                "customStyle" : {
                  "enabled" : null,
                  "hovered" : null,
                  "pressed" : null,
                  "activated" : null,
                  "disabled" : null
                }
              }
            },
            "title" : "Action button",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "4px",
            "configMode" : "basic",
            "actions" : {
              "click" : [ {
                "id" : "5ef0e11e-b00e-e16d-a673-6ffb61acea6e",
                "name" : "onClick",
                "icon" : "more_horiz",
                "type" : "doNothing",
                "openInSeparateDialog" : false,
                "openInPopover" : false
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "14370a39-3269-26de-636b-e28eff6a9a15"
        },
        "e46de907-4d44-60de-0aea-540f6e5b9b3d" : {
          "typeFullFqn" : "system.action_button",
          "type" : "latest",
          "sizeX" : 3,
          "sizeY" : 1,
          "config" : {
            "datasources" : [ {
              "type" : "entity",
              "entityAliasId" : "19f41c21-d9af-e666-8f50-e1748778f955",
              "dataKeys" : [ ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1730104988482,
                  "endTimeMs" : 1730191388482
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "AVG",
                "limit" : 25000
              }
            },
            "showTitle" : false,
            "backgroundColor" : "#FFFFFF01",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "0px",
            "settings" : {
              "activatedState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "disabledState" : {
                "action" : "DO_NOTHING",
                "defaultValue" : false,
                "getAttribute" : {
                  "key" : "state",
                  "scope" : null
                },
                "getTimeSeries" : {
                  "key" : "state"
                },
                "dataToValue" : {
                  "type" : "NONE",
                  "compareToValue" : true,
                  "dataToValueFunction" : "/* Should return boolean value */\nreturn data;"
                }
              },
              "appearance" : {
                "type" : "basic",
                "showLabel" : true,
                "label" : "{i18n:firmware-dashboard.firmwareStatusHistory} ${entityName}",
                "showIcon" : true,
                "icon" : "history",
                "iconSize" : 24,
                "iconSizeUnit" : "px",
                "mainColor" : "var(--tb-primary-500)",
                "backgroundColor" : "#FFFFFF",
                "autoScale" : true,
                "customStyle" : {
                  "enabled" : null,
                  "hovered" : null,
                  "pressed" : null,
                  "activated" : null,
                  "disabled" : null
                }
              }
            },
            "title" : "Action button",
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "dropShadow" : false,
            "enableFullscreen" : false,
            "enableDataExport" : false,
            "widgetStyle" : { },
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400
            },
            "showLegend" : false,
            "useDashboardTimewindow" : true,
            "displayTimewindow" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "noDataDisplayMessage" : "",
            "borderRadius" : "4px",
            "configMode" : "basic",
            "actions" : {
              "click" : [ {
                "id" : "5ef0e11e-b00e-e16d-a673-6ffb61acea6e",
                "name" : "onClick",
                "icon" : "more_horiz",
                "type" : "doNothing",
                "openInSeparateDialog" : false,
                "openInPopover" : false
              } ]
            }
          },
          "row" : 0,
          "col" : 0,
          "id" : "e46de907-4d44-60de-0aea-540f6e5b9b3d"
        },
        "1e8ca11d-ae1f-ea78-4ac1-6ec340a8538f" : {
          "type" : "latest",
          "sizeX" : 7.5,
          "sizeY" : 6.5,
          "config" : {
            "timewindow" : {
              "displayValue" : "",
              "selectedTab" : 0,
              "realtime" : {
                "realtimeType" : 1,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideQuickInterval" : false
              },
              "history" : {
                "historyType" : 0,
                "interval" : 1000,
                "timewindowMs" : 60000,
                "fixedTimewindow" : {
                  "startTimeMs" : 1673975375964,
                  "endTimeMs" : 1674061775964
                },
                "quickInterval" : "CURRENT_DAY",
                "hideInterval" : false,
                "hideLastInterval" : false,
                "hideFixedInterval" : false,
                "hideQuickInterval" : false
              },
              "aggregation" : {
                "type" : "NONE",
                "limit" : 200
              }
            },
            "showTitle" : true,
            "backgroundColor" : "rgb(255, 255, 255)",
            "color" : "rgba(0, 0, 0, 0.87)",
            "padding" : "4px",
            "settings" : {
              "entitiesTitle" : "Devices",
              "enableSearch" : true,
              "enableSelectColumnDisplay" : false,
              "enableStickyHeader" : true,
              "enableStickyAction" : false,
              "showCellActionsMenu" : true,
              "reserveSpaceForHiddenAction" : "false",
              "displayEntityName" : true,
              "entityNameColumnTitle" : "{i18n:device.device}",
              "displayEntityLabel" : true,
              "entityLabelColumnTitle" : "{i18n:asset.label}",
              "displayEntityType" : false,
              "displayPagination" : true,
              "defaultPageSize" : 10,
              "defaultSortOrder" : "entityName",
              "useRowStyleFunction" : false,
              "rowStyleFunction" : ""
            },
            "title" : "New Entities table",
            "dropShadow" : true,
            "enableFullscreen" : true,
            "titleStyle" : {
              "fontSize" : "16px",
              "fontWeight" : 400,
              "padding" : "5px 10px 5px 10px"
            },
            "useDashboardTimewindow" : false,
            "showLegend" : false,
            "datasources" : [ {
              "type" : "entity",
              "name" : null,
              "entityAliasId" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
              "filterId" : "19a0ad1c-b31d-4a29-9d7b-5d87e2a8ea6e",
              "dataKeys" : [ {
                "name" : "booted.tag",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.deviceTable.fwVersion}",
                "color" : "#ffeb3b",
                "settings" : { },
                "_hash" : 0.5365174899107905,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "booted.installed",
                "type" : "attribute",
                "label" : "{i18n:basic-dashboard.smallWidgetTitles.installationDate}",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.8723446414034588,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_title",
                "type" : "timeseries",
                "label" : "Target FW title",
                "color" : "#ffc107",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.9934225682766313,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_version",
                "type" : "timeseries",
                "label" : "Target FW version",
                "color" : "#607d8b",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled"
                },
                "_hash" : 0.5251724416842531,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "target_fw_ts",
                "type" : "timeseries",
                "label" : "Target FW set time",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : true,
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "cellContentFunction" : "if (value !== '') {\n    return ctx.date.transform(value, 'yyyy-MM-dd HH:mm:ss');\n}\nreturn '';"
                },
                "_hash" : 0.31823244858578237,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "Status",
                "color" : "#f44336",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "130px",
                  "useCellStyleFunction" : true,
                  "cellStyleFunction" : "if (value == 'FAILED') {\n    return {'color' : '#D93025'};\n}\nreturn {};",
                  "useCellContentFunction" : true,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "function icon(value) {\n    if (value == 'QUEUED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">hourglass_empty</mat-icon>';\n    }\n    if (value == 'INITIATED' || value == 'DOWNLOADING' || value == 'DOWNLOADED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">downloading</mat-icon>';\n        \n    }\n    if (value == 'VERIFIED' || value == 'UPDATING' ) {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">update</mat-icon>';\n    }\n    if (value == 'UPDATED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">download_done</mat-icon>';\n    }\n    if (value == 'READY_TO_INSTALL') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #000\">thumb_up</mat-icon>';\n    }\n    if (value == 'FAILED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\" style=\"color: #D93025\">warning</mat-icon>';\n    }\n    if (value == 'INSTALLED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">install_desktop</mat-icon>';\n    }\n    if (value == 'FLASHED') {\n        return '<mat-icon _role=\"img\" class=\"mat-icon notranslate material-icons mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">sd_storage</mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_AUTHORIZATION') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"gesture-tap-button\" data-mat-icon-namespace=\"mdi\" style=\"color: #043d5d\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-gesture-tap-button\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M13 5C15.21 5 17 6.79 17 9C17 10.5 16.2 11.77 15 12.46V11.24C15.61 10.69 16 9.89 16 9C16 7.34 14.66 6 13 6S10 7.34 10 9C10 9.89 10.39 10.69 11 11.24V12.46C9.8 11.77 9 10.5 9 9C9 6.79 10.79 5 13 5M20 20.5C19.97 21.32 19.32 21.97 18.5 22H13C12.62 22 12.26 21.85 12 21.57L8 17.37L8.74 16.6C8.93 16.39 9.2 16.28 9.5 16.28H9.7L12 18V9C12 8.45 12.45 8 13 8S14 8.45 14 9V13.47L15.21 13.6L19.15 15.79C19.68 16.03 20 16.56 20 17.14V20.5M20 2H4C2.9 2 2 2.9 2 4V12C2 13.11 2.9 14 4 14H8V12L4 12L4 4H20L20 12H18V14H20V13.96L20.04 14C21.13 14 22 13.09 22 12V4C22 2.9 21.11 2 20 2Z\"></path></svg></mat-icon>';\n    }\n    if (value == 'WAITING_DOWNLOAD_CONDITIONS') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"gesture-swipe-down\" data-mat-icon-namespace=\"mdi\" style=\"color: #043d5d\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-gesture-swipe-down\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M10,9A1,1 0 0,1 11,8A1,1 0 0,1 12,9V13.47L13.21,13.6L18.15,15.79C18.68,16.03 19,16.56 19,17.14V21.5C18.97,22.32 18.32,22.97 17.5,23H11C10.62,23 10.26,22.85 10,22.57L5.1,18.37L5.84,17.6C6.03,17.39 6.3,17.28 6.58,17.28H6.8L10,19V9M1,9L4,12L7,9H5V3H3V9H1Z\"></path></svg></mat-icon>';\n    }\n    if (value == 'WAITING_INSTALLATION_CONDITIONS') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"cellphone-cog\" data-mat-icon-namespace=\"mdi\" style=\"color: #043d5d\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-cellphone-cog\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M9.82,12.5C9.84,12.33 9.86,12.17 9.86,12C9.86,11.83 9.84,11.67 9.82,11.5L10.9,10.69C11,10.62 11,10.5 10.96,10.37L9.93,8.64C9.87,8.53 9.73,8.5 9.62,8.53L8.34,9.03C8.07,8.83 7.78,8.67 7.47,8.54L7.27,7.21C7.27,7.09 7.16,7 7.03,7H5C4.85,7 4.74,7.09 4.72,7.21L4.5,8.53C4.21,8.65 3.92,8.83 3.65,9L2.37,8.5C2.25,8.47 2.12,8.5 2.06,8.63L1.03,10.36C0.97,10.5 1,10.61 1.1,10.69L2.18,11.5C2.16,11.67 2.15,11.84 2.15,12C2.15,12.17 2.17,12.33 2.19,12.5L1.1,13.32C1,13.39 1,13.53 1.04,13.64L2.07,15.37C2.13,15.5 2.27,15.5 2.38,15.5L3.66,15C3.93,15.18 4.22,15.34 4.53,15.47L4.73,16.79C4.74,16.91 4.85,17 5,17H7.04C7.17,17 7.28,16.91 7.29,16.79L7.5,15.47C7.8,15.35 8.09,15.17 8.36,15L9.64,15.5C9.76,15.53 9.89,15.5 9.95,15.37L11,13.64C11.04,13.53 11,13.4 10.92,13.32L9.82,12.5M6,13.75C5,13.75 4.2,12.97 4.2,12C4.2,11.03 5,10.25 6,10.25C7,10.25 7.8,11.03 7.8,12C7.8,12.97 7,13.75 6,13.75M17,1H7A2,2 0 0,0 5,3V6H7V4H17V20H7V18H5V21A2,2 0 0,0 7,23H17A2,2 0 0,0 19,21V3A2,2 0 0,0 17,1Z\"></path></svg></mat-icon>';\n    }\n    if (value == 'CLEAN') {\n        return '<mat-icon role=\"img\" class=\"mat-icon notranslate mat-icon-no-color ng-star-inserted\" aria-hidden=\"true\" data-mat-icon-type=\"svg\" data-mat-icon-name=\"monitor-shimmer\" data-mat-icon-namespace=\"mdi\"><svg xmlns=\"http://www.w3.org/2000/svg\" id=\"mdi-monitor-shimmer\" viewBox=\"0 0 24 24\" fit=\"\" height=\"100%\" width=\"100%\" preserveAspectRatio=\"xMidYMid meet\" focusable=\"false\"><path d=\"M21 16H3V4H21M21 2H3C1.89 2 1 2.89 1 4V16C1 17.11 1.9 18 3 18H10V20H8V22H16V20H14V18H21C22.11 18 23 17.11 23 16V4C23 2.89 22.1 2 21 2M15 5.5L14.38 6.87L13 7.5L14.38 8.13L15 9.5L15.63 8.13L17 7.5L15.63 6.87L15 5.5M10.5 7.5L9.41 9.91L7 11L9.41 12.09L10.5 14.5L11.6 12.09L14 11L11.6 9.91L10.5 7.5\"></path></svg></mat-icon>';\n    }\n    return '';\n}\nfunction capitalize (s) {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase().replace(/_/g, \" \");\n}\n\nreturn icon(value) + '<span style=\"vertical-align: super;padding-left: 8px;\">' + capitalize(value) + '</span>';",
                  "defaultColumnVisibility" : "visible",
                  "columnSelectionToDisplay" : "enabled",
                  "columnExportOption" : "onlyVisible"
                },
                "_hash" : 0.7764426948615217,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null,
                "aggregationType" : "NONE"
              }, {
                "name" : "fw_checksum",
                "type" : "attribute",
                "label" : "fw_checksum",
                "color" : "#3f51b5",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.5594087842471693,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_url",
                "type" : "attribute",
                "label" : "fw_url",
                "color" : "#e91e63",
                "settings" : {
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled"
                },
                "_hash" : 0.4204673738685043,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "ota_auth_by_default",
                "type" : "attribute",
                "label" : "Auth",
                "color" : "#e91e63",
                "settings" : { },
                "_hash" : 0.029349555334992727,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : true,
                "postFuncBody" : "if (!value || value === 'true') {\n    return 'Auto';\n}\nreturn 'Manual';"
              }, {
                "name" : "ota_auth",
                "type" : "attribute",
                "label" : "ota_auth",
                "color" : "#ffeb3b",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "never"
                },
                "_hash" : 0.6944307776462175,
                "aggregationType" : null,
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              }, {
                "name" : "fw_state",
                "type" : "timeseries",
                "label" : "fw_state",
                "color" : "#03a9f4",
                "settings" : {
                  "customTitle" : "",
                  "columnWidth" : "0px",
                  "useCellStyleFunction" : false,
                  "cellStyleFunction" : "",
                  "useCellContentFunction" : false,
                  "useCellContentFunctionOnExport" : true,
                  "cellContentFunction" : "",
                  "defaultColumnVisibility" : "hidden",
                  "columnSelectionToDisplay" : "disabled",
                  "columnExportOption" : "never"
                },
                "_hash" : 0.680503981101044,
                "aggregationType" : "NONE",
                "units" : null,
                "decimals" : null,
                "funcBody" : null,
                "usePostProcessing" : null,
                "postFuncBody" : null
              } ],
              "alarmFilterConfig" : {
                "statusList" : [ "ACTIVE" ]
              }
            } ],
            "actions" : {
              "actionCellButton" : [ {
                "name" : "{i18n:firmware-dashboard.firmwareStatusHistory}",
                "icon" : "history",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "openDashboardState",
                "targetDashboardStateId" : "device_firmware_history",
                "setEntityId" : true,
                "stateEntityParamName" : null,
                "openInSeparateDialog" : false,
                "dialogTitle" : "",
                "dialogHideDashboardToolbar" : true,
                "dialogWidth" : null,
                "dialogHeight" : null,
                "openRightLayout" : false,
                "id" : "98a1406c-3301-bc2f-2c5d-d637ce3b663b"
              }, {
                "name" : "{i18n:ota-update.assign-firmware}",
                "icon" : "memory",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (!data.addr) {\n    if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN') {\n        return true;\n    }\n    if (check_perms('DEVICE', 'WRITE')) {\n        return true;\n    }\n}\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "customPretty",
                "customHtml" : "<form #editEntityForm=\"ngForm\" [formGroup]=\"editEntityFormGroup\"\n      (ngSubmit)=\"save()\"  class=\"edit-entity-form\">\n    <mat-toolbar fxLayout=\"row\" color=\"primary\">\n        <h2>Edit firmware {{entityName}}</h2>\n        <span fxFlex></span>\n        <button mat-icon-button (click)=\"cancel()\" type=\"button\">\n            <mat-icon class=\"material-icons\">close</mat-icon>\n        </button>\n    </mat-toolbar>\n    <mat-progress-bar color=\"warn\" mode=\"indeterminate\" *ngIf=\"isLoading$ | async\">\n    </mat-progress-bar>\n    <div style=\"height: 4px;\" *ngIf=\"!(isLoading$ | async)\"></div>\n    <div *ngIf=\"entity.deviceProfileId\" mat-dialog-content fxLayout=\"column\">\n        <tb-ota-package-autocomplete\n            [useFullEntityId]=\"true\"\n            [deviceProfileId]=\"entity.deviceProfileId.id\"\n            formControlName=\"firmwareId\">\n        </tb-ota-package-autocomplete>\n    </div>\n    <div mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\n        <button mat-button color=\"primary\"\n                type=\"button\"\n                [disabled]=\"(isLoading$ | async)\"\n                (click)=\"cancel()\" cdkFocusInitial>\n            Cancel\n        </button>\n        <button mat-button mat-raised-button color=\"primary\"\n                type=\"submit\"\n                [disabled]=\"(isLoading$ | async) || editEntityForm.invalid || !editEntityForm.dirty\">\n            Save\n        </button>\n    </div>\n</form>",
                "customCss" : "form {\n    min-width: 300px !important;\n}",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet customDialog = $injector.get(widgetContext.servicesMap.get('customDialog'));\nlet entityService = $injector.get(widgetContext.servicesMap.get('entityService'));\nlet deviceService = $injector.get(widgetContext.servicesMap.get('deviceService'));\n\nopenEditEntityDialog();\n\nfunction openEditEntityDialog() {\n    customDialog.customDialog(htmlTemplate, EditEntityDialogController).subscribe();\n}\n\nfunction EditEntityDialogController(instance) {\n    let vm = instance;\n\n    vm.entityName = entityName;\n    vm.entity = {};\n\n    vm.editEntityFormGroup = vm.fb.group({\n        firmwareId: [null]\n    });\n\n    getEntityInfo();\n\n    vm.cancel = function() {\n        vm.dialogRef.close(null);\n    };\n\n    vm.save = function() {\n        vm.editEntityFormGroup.markAsPristine();\n        saveEntity().subscribe(\n            function () {\n                // widgetContext.updateAliases();\n                vm.dialogRef.close(null);\n            }\n        );\n    };\n\n\n    function getEntityInfo() {\n        entityService.getEntity(entityId.entityType, entityId.id).subscribe(\n            function (data) {\n                vm.entity = data;\n                vm.editEntityFormGroup.patchValue({\n                    firmwareId: vm.entity.firmwareId\n                }, {emitEvent: false});\n            }\n        );\n    }\n\n    function saveEntity() {\n        const formValues = vm.editEntityFormGroup.value;\n        vm.entity.firmwareId = formValues.firmwareId;\n        return deviceService.saveDevice(vm.entity);\n    }\n}",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "23099c1d-454b-25dc-8bc0-7cf33c21c5d5"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.autoAuth}",
                "icon" : "mdi:refresh-auto",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Manual') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Manual') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "994bad3a-ddf3-0e90-01d8-04150f0ba498"
              }, {
                "name" : "{i18n:basic-dashboard.smallWidgetTitles.manualAuth}",
                "icon" : "mdi:gesture-tap",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "if (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && data.Auth === 'Auto') {\n    return true;\n}\nif (check_perms('DEVICE', 'WRITE_ATTRIBUTES') && data.Auth === 'Auto') {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth_by_default\", value: false}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "a2594ee5-e1aa-fd7c-2256-cefa6f5432a0"
              }, {
                "name" : "{i18n:firmware-dashboard.allowInstallation}",
                "icon" : "mdi:wrench-cog",
                "useShowWidgetActionFunction" : true,
                "showWidgetActionFunction" : "let ota_auth = data.ota_auth ? data.ota_auth : 'false';\nif (widgetContext.dashboard.authUser.authority == 'TENANT_ADMIN' && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\nif (check_perms('DEVICE', 'RPC_CALL') && ota_auth === 'false' && data.fw_state === \"WAITING_INSTALLATION_AUTHORIZATION\") {\n    return true;\n}\n\nreturn false;\n\nfunction check_perms(entityType, operation) {\n    let $injector = widgetContext.$scope.$injector; \n    let userPermissionsService = $injector.get(widgetContext.servicesMap.get('userPermissionsService'));\n    let perms = userPermissionsService.userPermissions;\n    let entityTypes = [entityType, 'ALL'];\n    let operations = [operation, 'ALL'];\n    for (let i in entityTypes) {\n        if (perms.genericPermissions.hasOwnProperty(entityTypes[i])) {\n            for (let j in operations) {\n                if (perms.genericPermissions[entityTypes[i]].indexOf(operations[j]) > -1) {\n                    return true;\n                }\n            }\n        }\n    }\n    for (let key in perms.groupPermissions) {\n        if (perms.groupPermissions[key].entityType === entityType && perms.groupPermissions[key].operations.some(op => operations.includes(op)) ) {\n            return true;\n        }\n    }\n    return false;\n}",
                "type" : "custom",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\nlet attributeService = $injector.get(widgetContext.servicesMap.get('attributeService'));\nlet translate = widgetContext.translate;\nlet $scope = widgetContext.$scope;\nattributeService.saveEntityAttributes(entityId, \"SHARED_SCOPE\", [{key: \"ota_auth\", value: true}]).subscribe(\n    function () {\n        $scope.showToast('success', translate.instant('edge-event.action-type-updated'), 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }\n    /*function (error) {\n        $scope.showToast('error', error, 60000, \"bottom\", \"left\", $scope.toastTargetId);\n    }*/\n);",
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "9ae4c19e-73ce-f2dd-26f2-bcb984cd99e9"
              } ],
              "rowClick" : [ {
                "name" : "Select device",
                "icon" : "more_horiz",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "updateDashboardState",
                "targetDashboardStateId" : null,
                "setEntityId" : true,
                "stateEntityParamName" : "SelectedDevice",
                "openRightLayout" : false,
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "ab1124c2-9562-ed25-9a8f-6a68887a2ac2"
              } ],
              "headerButton" : [ {
                "name" : "{i18n:firmware-dashboard.iconHelp.title}",
                "icon" : "help",
                "useShowWidgetActionFunction" : null,
                "showWidgetActionFunction" : "return true;",
                "type" : "customPretty",
                "customHtml" : "<!--<form style=\"width: 480px\">-->\r\n<form>\r\n\t<mat-toolbar fxLayout=\"row\" color=\"primary\">\r\n\t\t<h2>{{\"firmware-dashboard.iconHelp.title\" | translate}}</h2>\r\n\t\t<span fxFlex></span>\r\n\t\t<button mat-icon-button (click)=\"cancel()\" type=\"button\">\r\n\t\t\t<mat-icon class=\"material-icons\">close</mat-icon>\r\n\t\t</button>\r\n\t</mat-toolbar>\r\n\t<mat-progress-bar\r\n\t\tcolor=\"warn\"\r\n\t\tmode=\"indeterminate\"\r\n\t\t*ngIf=\"isLoading$ | async\"\r\n\t>\r\n\t</mat-progress-bar>\r\n\t<div style=\"height: 4px\" *ngIf=\"!(isLoading$ | async)\"></div>\r\n\t<div mat-dialog-content>\r\n\t\t<div class=\"mat-padding\" fxLayout=\"column\">\r\n\t\t\t<section>\r\n\t\t\t\t<!--<h4>{{\"firmware-dashboard.iconHelp.title\" | translate}}</h4>-->\r\n\t\t\t\t<table class=\"icon-table\">\r\n\t\t\t\t\t<tr *ngFor=\"let item of iconStates\">\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"item.icon\" [class]=\"item.class\" [fontIcon]=\"item.icon\"></mat-icon>\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"item.svgIcon\" [class]=\"item.class\" [svgIcon]=\"item.svgIcon\"></mat-icon>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td><b>{{ item.title }}:</b> {{ item.info }}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</section>\r\n\t\t\t<section *ngIf=\"helpInfo.length > 0\">\r\n\t\t\t\t<h4>Extra information</h4>\r\n\t\t\t\t<table class=\"icon-table\">\r\n\t\t\t\t\t<tr *ngFor=\"let item of helpInfo\">\r\n\t\t\t\t\t\t<td>{{ item.title }}</td>\r\n\t\t\t\t\t\t<td>{{ item.description }}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</section>\r\n\t\t</div>\r\n\t</div>\r\n\t<div mat-dialog-actions fxLayout=\"row\">\r\n\t\t<span fxFlex></span>\r\n\t\t<button\r\n\t\t\tmat-button\r\n\t\t\tcolor=\"primary\"\r\n\t\t\tstyle=\"margin-right: 20px\"\r\n\t\t\ttype=\"button\"\r\n\t\t\t[disabled]=\"(isLoading$ | async)\"\r\n\t\t\t(click)=\"cancel()\"\r\n\t\t\tcdkFocusInitial\r\n\t\t>\r\n\t\t\tClose\r\n\t\t</button>\r\n\t</div>\r\n</form>\r\n",
                "customCss" : "/*=======================================================================*/\n/*==========  There are two examples: for edit and add entity  ==========*/\n/*=======================================================================*/\n/*========================  Edit entity example  ========================*/\n/*=======================================================================*/\n/*\n.edit-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.edit-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n/*========================================================================*/\n/*=========================  Add entity example  =========================*/\n/*========================================================================*/\n/*\n.add-entity-form .boolean-value-input {\n    padding-left: 5px;\n}\n\n.add-entity-form .boolean-value-input .checkbox-label {\n    color: rgba(0,0,0,0.54);\n    font-size: 12px;\n}\n\n.relations-list .header {\n    padding-right: 5px;\n    padding-bottom: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .header .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n    font-size: 12px;\n    font-weight: 700;\n    color: rgba(0, 0, 0, .54);\n    white-space: nowrap;\n}\n\n.relations-list .mat-form-field-infix {\n    width: auto !important;\n}\n\n.relations-list .body {\n    padding-right: 5px;\n    padding-bottom: 15px;\n    padding-left: 5px;\n}\n\n.relations-list .body .row {\n    padding-top: 5px;\n}\n\n.relations-list .body .cell {\n    padding-right: 5px;\n    padding-left: 5px;\n}\n\n.relations-list .body .md-button {\n    margin: 0;\n}\n*/\n",
                "customFunction" : "let $injector = widgetContext.$scope.$injector;\r\nlet customDialog = $injector.get(widgetContext.servicesMap.get(\"customDialog\"));\r\n\r\nopenAddAssetDialog();\r\n\r\nfunction openAddAssetDialog() {\r\n\tcustomDialog.customDialog(htmlTemplate, AddAssetDialogController).subscribe();\r\n}\r\n\r\nasync function AddAssetDialogController(instance) {\r\n\tlet vm = instance;\r\n\tvm.iconStates = getIconStates();\r\n\tvm.helpInfo = getHelpInfo();\r\n\r\n\tvm.cancel = function () {\r\n\t\tvm.dialogRef.close(null);\r\n\t};\r\n}\r\n\r\n//Get information of the confirmation states\r\nfunction getIconStates() {\r\n    let translate = widgetContext.translate;\r\n\treturn [\r\n\t    {icon: 'sd_storage', title:\"Flashed\", info: translate.instant('firmware-dashboard.iconHelp.flashed')},\r\n\t    {icon: 'hourglass_empty', title:\"Queued\", info: translate.instant('firmware-dashboard.iconHelp.queued')},\r\n\t    {icon: 'downloading', title:\"Initiated\", info: translate.instant('firmware-dashboard.iconHelp.initiated')},\r\n\t    {svgIcon: 'mdi:gesture-swipe-down', title:\"Waiting download conditions\", info: translate.instant('firmware-dashboard.iconHelp.waiting_download_conditions')},\r\n\t    {icon: 'downloading', title:\"Downloading\", info: translate.instant('firmware-dashboard.iconHelp.downloading')},\r\n\t    {icon: 'downloading', title:\"Downloaded\", info: translate.instant('firmware-dashboard.iconHelp.downloaded')},\r\n\t    {icon: 'update', title:\"Verified\", info: translate.instant('firmware-dashboard.iconHelp.verified')},\r\n\t    {svgIcon: 'mdi:gesture-tap-button', title:\"Waiting installation authorization\", info: translate.instant('firmware-dashboard.iconHelp.waiting_installation_authorization')},\r\n\t    {svgIcon: 'mdi:cellphone-cog', title:\"Waiting installation conditions\", info: translate.instant('firmware-dashboard.iconHelp.waiting_installation_conditions')},\r\n\t    {icon: 'update', title:\"Updating\", info: translate.instant('firmware-dashboard.iconHelp.updating')},\r\n\t    {icon: 'install_desktop', title:\"Installed\", info: translate.instant('firmware-dashboard.iconHelp.installed')},\r\n\t    {icon: 'download_done', title:\"Updated\", info: translate.instant('firmware-dashboard.iconHelp.updated')},\r\n\t    {icon: 'warning', title:\"Failed\", info: translate.instant('firmware-dashboard.iconHelp.failed')},\r\n\t    {svgIcon: 'mdi:monitor-shimmer', title:\"Clean\", info: translate.instant('firmware-dashboard.iconHelp.clean')},\r\n    ];\r\n}\r\n\r\n//Get extra help information\r\nfunction getHelpInfo() {\r\n    return [];\r\n}\r\n",
                "customResources" : [ ],
                "openInSeparateDialog" : false,
                "openInPopover" : false,
                "id" : "b8eb45d5-aa36-580d-7da3-b4893361990a"
              } ]
            },
            "showTitleIcon" : false,
            "iconColor" : "rgba(0, 0, 0, 0.87)",
            "iconSize" : "24px",
            "titleTooltip" : "",
            "widgetStyle" : { },
            "displayTimewindow" : true,
            "enableDataExport" : true,
            "widgetCss" : "",
            "pageSize" : 1024,
            "decimals" : 0,
            "noDataDisplayMessage" : ""
          },
          "row" : 0,
          "col" : 0,
          "id" : "1e8ca11d-ae1f-ea78-4ac1-6ec340a8538f",
          "typeFullFqn" : "system.cards.entities_table"
        }
      },
      "states" : {
        "default" : {
          "name" : "Device list",
          "root" : true,
          "layouts" : {
            "main" : {
              "widgets" : {
                "cd03188e-cd9d-9601-fd57-da4cb95fc016" : {
                  "sizeX" : 19,
                  "sizeY" : 12,
                  "row" : 2,
                  "col" : 5,
                  "resizable" : true,
                  "mobileOrder" : 3,
                  "mobileHeight" : 11
                },
                "17543c57-af4a-2c1e-bf12-53a7b46791e6" : {
                  "sizeX" : 6,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 0,
                  "resizable" : true,
                  "mobileOrder" : 1,
                  "mobileHeight" : 2
                },
                "6c1c4e1a-bce0-f5ad-ff8b-ba1dfc5a4ec6" : {
                  "sizeX" : 6,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 6,
                  "resizable" : true,
                  "mobileOrder" : 1,
                  "mobileHeight" : 2
                },
                "e6674227-9cf3-a2f6-ecac-5ccfc38a3c81" : {
                  "sizeX" : 6,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 18,
                  "resizable" : true,
                  "mobileOrder" : 1,
                  "mobileHeight" : 2
                },
                "77b10144-b904-edd5-8c7c-8fb75616c6d8" : {
                  "sizeX" : 6,
                  "sizeY" : 2,
                  "row" : 0,
                  "col" : 12,
                  "resizable" : true,
                  "mobileOrder" : 1,
                  "mobileHeight" : 2
                },
                "a3ffc20b-fe2d-1a93-c1f3-75a859ebffea" : {
                  "sizeX" : 5,
                  "sizeY" : 12,
                  "row" : 2,
                  "col" : 0,
                  "resizable" : true,
                  "mobileOrder" : 2,
                  "mobileHeight" : 3
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "margin" : 12,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : true,
                "mobileRowHeight" : 70,
                "outerMargin" : true,
                "layoutType" : "default"
              }
            }
          }
        },
        "device_firmware_history" : {
          "name" : "Firmware history: ${entityName}",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "100b756c-0082-6505-3ae1-3603e6deea48" : {
                  "sizeX" : 24,
                  "sizeY" : 11,
                  "row" : 1,
                  "col" : 0
                },
                "8bc002ec-2917-0d04-029b-0f17d08c4d12" : {
                  "sizeX" : 5,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 0
                },
                "e46de907-4d44-60de-0aea-540f6e5b9b3d" : {
                  "sizeX" : 19,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 5
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "outerMargin" : true,
                "layoutType" : "default"
              }
            }
          }
        },
        "device_waiting" : {
          "name" : "Device waiting",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "a3ffc20b-fe2d-1a93-c1f3-75a859ebffea" : {
                  "sizeX" : 5,
                  "sizeY" : 12,
                  "mobileOrder" : 2,
                  "mobileHeight" : 3,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 0
                },
                "8bc002ec-2917-0d04-029b-0f17d08c4d12" : {
                  "sizeX" : 5,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 0
                },
                "a2c01444-fe68-a614-e519-20bff2dc116a" : {
                  "sizeX" : 19,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 5
                },
                "1e8ca11d-ae1f-ea78-4ac1-6ec340a8538f" : {
                  "sizeX" : 19,
                  "sizeY" : 12,
                  "mobileOrder" : 3,
                  "mobileHeight" : 11,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 5
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "outerMargin" : true,
                "layoutType" : "default"
              }
            }
          }
        },
        "device_updating" : {
          "name" : "Device updating",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "a3ffc20b-fe2d-1a93-c1f3-75a859ebffea" : {
                  "sizeX" : 5,
                  "sizeY" : 11,
                  "mobileOrder" : 2,
                  "mobileHeight" : 3,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 0
                },
                "11039d20-a1be-5c6c-bc01-045b3f6d090e" : {
                  "sizeX" : 19,
                  "sizeY" : 11,
                  "mobileOrder" : 3,
                  "mobileHeight" : 11,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 5
                },
                "8bc002ec-2917-0d04-029b-0f17d08c4d12" : {
                  "sizeX" : 5,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 0
                },
                "b8eb298c-c7b9-9a97-32d7-dcf9754ab098" : {
                  "sizeX" : 19,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 5
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "outerMargin" : true,
                "layoutType" : "default"
              }
            }
          }
        },
        "device_updated" : {
          "name" : "Device updated",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "505fb066-122f-5d7f-80f4-40f63dd299d1" : {
                  "sizeX" : 19,
                  "sizeY" : 12,
                  "mobileOrder" : 3,
                  "mobileHeight" : 11,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 5
                },
                "a3ffc20b-fe2d-1a93-c1f3-75a859ebffea" : {
                  "sizeX" : 5,
                  "sizeY" : 12,
                  "mobileOrder" : 2,
                  "mobileHeight" : 3,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 0
                },
                "8bc002ec-2917-0d04-029b-0f17d08c4d12" : {
                  "sizeX" : 5,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 0
                },
                "14370a39-3269-26de-636b-e28eff6a9a15" : {
                  "sizeX" : 19,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 5
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "outerMargin" : true,
                "layoutType" : "default"
              }
            }
          }
        },
        "device_error" : {
          "name" : "Device failed",
          "root" : false,
          "layouts" : {
            "main" : {
              "widgets" : {
                "a3ffc20b-fe2d-1a93-c1f3-75a859ebffea" : {
                  "sizeX" : 5,
                  "sizeY" : 11,
                  "mobileOrder" : 2,
                  "mobileHeight" : 4,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 0
                },
                "8bc002ec-2917-0d04-029b-0f17d08c4d12" : {
                  "sizeX" : 5,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 0
                },
                "056b9fb8-16e5-e22a-865d-ab4af09a7698" : {
                  "sizeX" : 19,
                  "sizeY" : 11,
                  "mobileOrder" : 3,
                  "mobileHeight" : 11,
                  "resizable" : true,
                  "row" : 1,
                  "col" : 5
                },
                "a5e19342-6dd0-fc0a-82ae-44afb0112897" : {
                  "sizeX" : 19,
                  "sizeY" : 1,
                  "mobileOrder" : 1,
                  "mobileHeight" : 1,
                  "resizable" : true,
                  "row" : 0,
                  "col" : 5
                }
              },
              "gridSettings" : {
                "backgroundColor" : "#eeeeee",
                "color" : "rgba(0,0,0,0.870588)",
                "columns" : 24,
                "margin" : 10,
                "backgroundSizeMode" : "100%",
                "autoFillHeight" : true,
                "backgroundImageUrl" : null,
                "mobileAutoFillHeight" : false,
                "mobileRowHeight" : 70,
                "outerMargin" : true,
                "layoutType" : "default"
              }
            }
          }
        }
      },
      "entityAliases" : {
        "19f41c21-d9af-e666-8f50-e1748778f955" : {
          "id" : "19f41c21-d9af-e666-8f50-e1748778f955",
          "alias" : "State entity",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : null,
            "defaultStateEntity" : null
          }
        },
        "ccae8410-5bc3-1657-a383-e06136042fff" : {
          "id" : "ccae8410-5bc3-1657-a383-e06136042fff",
          "alias" : "OrganigramRoot",
          "filter" : {
            "type" : "entitiesByGroupName",
            "resolveMultiple" : false,
            "groupStateEntity" : false,
            "stateEntityParamName" : null,
            "groupType" : "ASSET",
            "entityGroupNameFilter" : "OrganigramRoot"
          }
        },
        "71c79564-6026-34ed-d9c6-5a86df31f61f" : {
          "id" : "71c79564-6026-34ed-d9c6-5a86df31f61f",
          "alias" : "SelectedOrganigramDevices",
          "filter" : {
            "type" : "relationsQuery",
            "resolveMultiple" : true,
            "rootStateEntity" : true,
            "stateEntityParamName" : "OnOrganigramSelected",
            "defaultStateEntity" : null,
            "rootEntity" : null,
            "direction" : "FROM",
            "maxLevel" : 100,
            "fetchLastLevelOnly" : false,
            "filters" : [ {
              "relationType" : "Organigram",
              "entityTypes" : [ "DEVICE" ]
            } ]
          }
        },
        "b91eb589-fe77-0fcd-d50a-402eaeea0994" : {
          "id" : "b91eb589-fe77-0fcd-d50a-402eaeea0994",
          "alias" : "SelectedDevice",
          "filter" : {
            "type" : "stateEntity",
            "resolveMultiple" : false,
            "stateEntityParamName" : "SelectedDevice",
            "defaultStateEntity" : null
          }
        },
        "fed02cfa-eb79-50e1-884b-530e7507e243" : {
          "id" : "fed02cfa-eb79-50e1-884b-530e7507e243",
          "alias" : "Current User Owner",
          "filter" : {
            "type" : "stateEntityOwner",
            "resolveMultiple" : false,
            "stateEntityParamName" : "CurrentUserOwner",
            "defaultStateEntity" : {
              "entityType" : "CURRENT_USER",
              "id" : "13814000-1dd2-11b2-8080-808080808080"
            }
          }
        }
      },
      "filters" : {
        "19a0ad1c-b31d-4a29-9d7b-5d87e2a8ea6e" : {
          "id" : "19a0ad1c-b31d-4a29-9d7b-5d87e2a8ea6e",
          "filter" : "WaitingDevicesFilter",
          "keyFilters" : [ {
            "key" : {
              "type" : "TIME_SERIES",
              "key" : "fw_state"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "OR",
                "predicates" : [ {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "QUEUED",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "WAITING_INSTALLATION_AUTHORIZATION",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "WAITING_DOWNLOAD_CONDITIONS",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "WAITING_INSTALLATION_CONDITIONS",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                } ],
                "type" : "COMPLEX"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        },
        "579f0468-9ce9-7e3e-b34c-88dd3de59897" : {
          "id" : "579f0468-9ce9-7e3e-b34c-88dd3de59897",
          "filter" : "UpdatingDevicesFilter",
          "keyFilters" : [ {
            "key" : {
              "type" : "TIME_SERIES",
              "key" : "fw_state"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "OR",
                "predicates" : [ {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "INITIATED",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : false,
                    "label" : "fw_state equel",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "DOWNLOADING",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : false,
                    "label" : "fw_state equal",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "DOWNLOADED",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : false,
                    "label" : "fw_state equal",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "VERIFIED",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : false,
                    "label" : "fw_state equal",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "UPDATING",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : false,
                    "label" : "fw_state equal",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "READY_TO_INSTALL",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "INSTALLED",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                } ],
                "type" : "COMPLEX"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        },
        "6044e198-df64-cd76-f339-696f220c4943" : {
          "id" : "6044e198-df64-cd76-f339-696f220c4943",
          "filter" : "UpdetedDevicesFilter",
          "keyFilters" : [ {
            "key" : {
              "type" : "TIME_SERIES",
              "key" : "fw_state"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "OR",
                "predicates" : [ {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "UNASSIGNED",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                }, {
                  "keyFilterPredicate" : {
                    "operation" : "EQUAL",
                    "value" : {
                      "defaultValue" : "UPDATED",
                      "dynamicValue" : null
                    },
                    "ignoreCase" : false,
                    "type" : "STRING"
                  },
                  "userInfo" : {
                    "editable" : true,
                    "label" : "",
                    "autogeneratedLabel" : true,
                    "order" : 0
                  }
                } ],
                "type" : "COMPLEX"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        },
        "bdbc6ea1-95a7-3912-341a-58dc7704a00f" : {
          "id" : "bdbc6ea1-95a7-3912-341a-58dc7704a00f",
          "filter" : "FailedDevicesFilter",
          "keyFilters" : [ {
            "key" : {
              "type" : "TIME_SERIES",
              "key" : "fw_state"
            },
            "valueType" : "STRING",
            "predicates" : [ {
              "keyFilterPredicate" : {
                "operation" : "EQUAL",
                "value" : {
                  "defaultValue" : "FAILED",
                  "dynamicValue" : null
                },
                "ignoreCase" : false,
                "type" : "STRING"
              },
              "userInfo" : {
                "editable" : true,
                "label" : "",
                "autogeneratedLabel" : true,
                "order" : 0
              }
            } ]
          } ],
          "editable" : false
        }
      },
      "timewindow" : {
        "displayValue" : "",
        "hideAggregation" : false,
        "hideAggInterval" : false,
        "hideTimezone" : false,
        "selectedTab" : 0,
        "realtime" : {
          "realtimeType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "quickInterval" : "CURRENT_DAY"
        },
        "history" : {
          "historyType" : 0,
          "interval" : 1000,
          "timewindowMs" : 60000,
          "fixedTimewindow" : {
            "startTimeMs" : 1618998609030,
            "endTimeMs" : 1619085009030
          },
          "quickInterval" : "CURRENT_DAY"
        },
        "aggregation" : {
          "type" : "AVG",
          "limit" : 25000
        }
      },
      "settings" : {
        "stateControllerId" : "entity",
        "showTitle" : false,
        "showDashboardsSelect" : false,
        "showEntitiesSelect" : false,
        "showDashboardTimewindow" : false,
        "showDashboardExport" : false,
        "toolbarAlwaysOpen" : true,
        "titleColor" : "rgba(0,0,0,0.870588)",
        "showFilters" : false,
        "showDashboardLogo" : false,
        "dashboardLogoUrl" : null,
        "showUpdateDashboardImage" : false,
        "hideToolbar" : true,
        "dashboardCss" : ""
      }
    },
    "name" : "Firmware",
    "resources" : null,
    "assignedCustomers" : null,
    "customerId" : null,
    "externalId" : null,
    "id" : {
      "entityType" : "DASHBOARD",
      "id" : "7e83baa0-9d1d-11f0-90d1-c945f7a34312"
    },
    "ownerId" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}